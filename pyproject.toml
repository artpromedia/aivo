[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = ["E","F","W","I","UP","N"]
ignore = [
    "E501",  # line too long, handled by black
    "ANN401",  # Dynamically typed expressions (Any) - common in FastAPI
    "N802",  # Invalid function name - common for FastAPI endpoints
    "N803",  # Invalid argument name - common for FastAPI path params
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"test_*.py" = ["ANN001", "ANN201", "ANN202", "ANN204", "E741"]
"tests/*.py" = ["ANN001", "ANN201", "ANN202", "ANN204", "E741"]
"**/test_*.py" = ["ANN001", "ANN201", "ANN202", "ANN204", "E741", "D", "F401"]
"**/tests/*.py" = ["ANN001", "ANN201", "ANN202", "ANN204", "E741"]
"**/conftest.py" = ["ANN001", "ANN201", "ANN202", "ANN204", "D", "F401"]
"libs/sdk-py/**/__init__.py" = ["F401", "F403", "E501"]  # Allow wildcard imports and long lines in SDK
"libs/sdk-py/**/*.py" = ["ANN201", "ANN202", "ANN001", "E721"]  # SDK files - minimal type requirements
"**/check_deps.py" = ["F401"]  # Dependency check files - testing imports only
"**/test_dependencies.py" = ["F401"]  # Dependency check files - testing imports only
"services/*/test_long_line.py" = ["E501"]  # Allow long lines in line length test files
# FastAPI endpoints - response models specified in decorators
"**/main.py" = ["ANN201"]  # FastAPI endpoints with response_model decorators
"**/routes.py" = ["ANN201"]  # FastAPI route handlers with response_model decorators
# Generated protobuf files - ignore all type annotations
"**/protos/*_pb2_grpc.py" = ["ANN001", "ANN201", "ANN202", "ANN204"]
"**/grpc_server.py" = ["ANN001"]  # gRPC server implementations
# Migration and setup files - allow import after configuration
"**/migrations/env.py" = ["E402"]
"services/auth-svc/app/main.py" = ["E402", "ANN201"]  # Dependency overrides after app setup

[tool.mypy]
python_version = "3.11"
strict = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
disallow_any_generics = true
disallow_untyped_defs = true
no_implicit_optional = true
show_error_codes = true

[[tool.mypy.overrides]]
module = ["tests.*"]
ignore_errors = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-q --strict-markers --disable-warnings"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/conftest.py",
    "*/venv/*",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
