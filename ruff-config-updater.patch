diff --git a/.editorconfig b/.editorconfig
new file mode 100644
index 0000000..0c9b8e0
--- /dev/null
+++ b/.editorconfig
@@ -0,0 +1,22 @@
+# EditorConfig is awesome: https://editorconfig.org
+root = true
+
+[*]
+end_of_line = lf
+charset = utf-8
+insert_final_newline = true
+trim_trailing_whitespace = true
+indent_style = space
+indent_size = 2
+
+[*.py]
+indent_size = 4
+max_line_length = 100
+
+[*.{yml,yaml,json,md}]
+max_line_length = off
+
+[Makefile]
+indent_style = tab
+indent_size = 4
+
diff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml
new file mode 100644
index 0000000..f7b4a1a
--- /dev/null
+++ b/.pre-commit-config.yaml
@@ -0,0 +1,32 @@
+repos:
+  - repo: https://github.com/astral-sh/ruff-pre-commit
+    rev: v0.6.5
+    hooks:
+      - id: ruff
+        args: [--fix]
+      - id: ruff-format
+
+  - repo: https://github.com/pre-commit/pre-commit-hooks
+    rev: v4.6.0
+    hooks:
+      - id: end-of-file-fixer
+      - id: trailing-whitespace
+      - id: mixed-line-ending
+        args: [--fix=lf]
+
+# Optional: prevent large files in git by mistake
+  - repo: https://github.com/jleclanche/git-large-file
+    rev: 2.0.0
+    hooks:
+      - id: check-git-large-file
+        args: [--maxkb=5120]
+
diff --git a/.vscode/extensions.json b/.vscode/extensions.json
new file mode 100644
index 0000000..2a7b4a1
--- /dev/null
+++ b/.vscode/extensions.json
@@ -0,0 +1,7 @@
+{
+  "recommendations": [
+    "charliermarsh.ruff",
+    "ms-python.python",
+    "esbenp.prettier-vscode"
+  ]
+}
diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..b8f3a1c
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,22 @@
+{
+  "files.eol": "\n",
+  "files.trimTrailingWhitespace": true,
+  "editor.formatOnSave": true,
+  "editor.codeActionsOnSave": {
+    "source.fixAll": true,
+    "source.fixAll.ruff": true,
+    "source.organizeImports": true
+  },
+  "ruff.lint.enable": true,
+  "ruff.format.enable": true,
+
+  // Prefer Ruff over legacy linters to avoid duplicate noise
+  "python.linting.pylintEnabled": false,
+  "python.linting.flake8Enabled": false
+}
diff --git a/.github/workflows/python-hygiene.yml b/.github/workflows/python-hygiene.yml
new file mode 100644
index 0000000..d2f11a5
--- /dev/null
+++ b/.github/workflows/python-hygiene.yml
@@ -0,0 +1,54 @@
+name: python-hygiene
+
+on:
+  push:
+    branches: [ "main", "develop" ]
+  pull_request:
+    types: [opened, synchronize, reopened, ready_for_review]
+
+permissions:
+  contents: read
+
+concurrency:
+  group: python-hygiene-${{ github.ref }}
+  cancel-in-progress: true
+
+jobs:
+  hygiene:
+    runs-on: ubuntu-22.04
+    steps:
+      - name: Checkout
+        uses: actions/checkout@v4.2.2
+
+      - name: Setup Python 3.11
+        uses: actions/setup-python@v5
+        with:
+          python-version: '3.11'
+
+      - name: Install tools
+        run: |
+          python -m pip install --upgrade pip
+          python -m pip install pre-commit ruff
+
+      - name: Run pre-commit (fix whitespace/eol)
+        run: |
+          pre-commit run --all-files
+
+      - name: Ruff lint (no fixes)
+        run: |
+          ruff check .
+
+      - name: Ruff format check
+        run: |
+          ruff format --check .
+
+      - name: Fail if changes were produced by hooks
+        run: |
+          if ! git diff --quiet; then
+            echo "::error::Pre-commit hooks or Ruff would modify files. Run 'pre-commit run --all-files' and 'ruff check --fix .' locally."
+            git --no-pager diff --stat
+            exit 1
+          fi
+'@ | Out-File -FilePath "python-hygiene.patch" -Encoding UTF8
git apply python-hygiene.patch
pre-commit install
git add .
git commit -S -m "chore(devx): repo-wide python hygiene (ruff+editorconfig+ci)"
git push
@'
diff --git a/scripts/ensure_ruff_config.py b/scripts/ensure_ruff_config.py
new file mode 100755
index 0000000..c6a9b3f
--- /dev/null
+++ b/scripts/ensure_ruff_config.py
@@ -0,0 +1,226 @@
+#!/usr/bin/env python3
+"""
+Idempotently ensure `pyproject.toml` contains a Ruff config with:
+  - [tool.ruff] line-length = 100, target-version = "py311"
+  - [tool.ruff.lint] select = ["E","F","W","I","UP","N"]  (created if missing)
+
+It preserves everything else and only edits/creates the [tool.ruff] tables.
+Usage:
+  python scripts/ensure_ruff_config.py --write     # modify file in place
+  python scripts/ensure_ruff_config.py --check     # exit 1 if change needed
+"""
+from __future__ import annotations
+
+import argparse
+import re
+from pathlib import Path
+
+PYPROJECT = Path("pyproject.toml")
+
+RUFF_HDR_RE = re.compile(r"^\[tool\.ruff\]\s*$")
+TABLE_HDR_RE = re.compile(r"^\[[^\]]+\]\s*$")
+
+def _find_table(lines: list[str], header_re: re.Pattern[str]) -> tuple[int | None, int | None]:
+    """Return (start_idx, end_idx_exclusive) for table header; end is next table or EOF."""
+    start = None
+    for i, ln in enumerate(lines):
+        if header_re.match(ln):
+            start = i
+            break
+    if start is None:
+        return None, None
+    # find next table or EOF
+    for j in range(start + 1, len(lines)):
+        if TABLE_HDR_RE.match(lines[j]):
+            return start, j
+    return start, len(lines)
+
+def _ensure_kv(block_lines: list[str], key: str, value_line: str) -> list[str]:
+    """Ensure 'key = ...' exists in block_lines; replace if present, append if not."""
+    key_re = re.compile(rf"^\s*{re.escape(key)}\s*=")
+    for i, ln in enumerate(block_lines):
+        if key_re.match(ln):
+            block_lines[i] = value_line + "\n"
+            return block_lines
+    # append before possible trailing blank lines
+    # trim trailing blanks, then add key, then re-add single blank
+    while block_lines and block_lines[-1].strip() == "":
+        block_lines.pop()
+    block_lines.append(value_line + "\n")
+    block_lines.append("\n")
+    return block_lines
+
+def _ensure_section(lines: list[str]) -> tuple[list[str], bool]:
+    """
+    Ensure [tool.ruff] and [tool.ruff.lint] sections exist and contain desired keys.
+    Returns (new_lines, changed).
+    """
+    changed = False
+
+    # 1) Ensure [tool.ruff] exists
+    start, end = _find_table(lines, RUFF_HDR_RE)
+    if start is None:
+        # create a new [tool.ruff] table at EOF with desired defaults
+        append = []
+        if lines and lines[-1].strip() != "":
+            append.append("\n")
+        append.extend([
+            "[tool.ruff]\n",
+            'line-length = 100\n',
+            'target-version = "py311"\n',
+            "\n",
+        ])
+        lines = lines + append
+        changed = True
+        # refresh indices
+        start, end = _find_table(lines, RUFF_HDR_RE)
+
+    # 2) Ensure line-length and target-version inside [tool.ruff]
+    block = lines[start:end]
+    desired = block[:]
+    desired = _ensure_kv(desired, "line-length", "line-length = 100")
+    desired = _ensure_kv(desired, "target-version", 'target-version = "py311"')
+    if desired != block:
+        lines = lines[:start] + desired + lines[end:]
+        changed = True
+        # recompute indices in case sizes shifted
+        start, end = _find_table(lines, RUFF_HDR_RE)
+
+    # 3) Ensure [tool.ruff.lint] with select exists
+    lint_hdr_re = re.compile(r"^\[tool\.ruff\.lint\]\s*$")
+    lstart, lend = _find_table(lines, lint_hdr_re)
+    if lstart is None:
+        # create [tool.ruff.lint] after [tool.ruff]
+        insert_at = end
+        insert = [
+            "[tool.ruff.lint]\n",
+            'select = ["E","F","W","I","UP","N"]\n',
+            "\n",
+        ]
+        lines = lines[:insert_at] + insert + lines[insert_at:]
+        changed = True
+    else:
+        lint_block = lines[lstart:lend]
+        desired_lint = _ensure_kv(lint_block[:], "select", 'select = ["E","F","W","I","UP","N"]')
+        if desired_lint != lint_block:
+            lines = lines[:lstart] + desired_lint + lines[lend:]
+            changed = True
+
+    return lines, changed
+
+def main() -> int:
+    ap = argparse.ArgumentParser()
+    ap.add_argument("--write", action="store_true", help="write changes to pyproject.toml")
+    ap.add_argument("--check", action="store_true", help="exit 1 if changes would be made")
+    args = ap.parse_args()
+
+    if not PYPROJECT.exists():
+        print("pyproject.toml not found; nothing to do.")
+        return 0
+
+    original = PYPROJECT.read_text(encoding="utf-8").splitlines(keepends=True)
+    new_lines, changed = _ensure_section(original)
+
+    if args.check and changed:
+        print("Ruff config changes needed (run with --write).")
+        return 1
+
+    if args.write and changed:
+        PYPROJECT.write_text("".join(new_lines), encoding="utf-8", newline="\n")
+        print("Updated pyproject.toml with Ruff config (line-length=100, target-version=py311).")
+        return 0
+
+    if changed:
+        print("Changes required but --write not provided (use --write or --check).")
+        return 1
+
+    print("pyproject.toml already contains the desired Ruff configuration.")
+    return 0
+
+if __name__ == "__main__":
+    raise SystemExit(main())
diff --git a/.github/workflows/python-hygiene.yml b/.github/workflows/python-hygiene.yml
index d2f11a5..4a2d5f0 100644
--- a/.github/workflows/python-hygiene.yml
+++ b/.github/workflows/python-hygiene.yml
@@ -23,6 +23,14 @@ jobs:
       - name: Install tools
         run: |
           python -m pip install --upgrade pip
-          python -m pip install pre-commit ruff
+          python -m pip install pre-commit ruff
+
+      - name: Ensure Ruff config in pyproject (line-length=100, py311)
+        run: |
+          python scripts/ensure_ruff_config.py --write || true
+          # Show diff if any
+          git status --porcelain
+          git --no-pager diff --stat
 
       - name: Run pre-commit (fix whitespace/eol)
         run: |
