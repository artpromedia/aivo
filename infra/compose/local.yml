services:
  # Infrastructure Services
  postgres:
    image: postgres:16
    container_name: monorepo_postgres
    environment:
      POSTGRES_DB: monorepo
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - '5433:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d monorepo']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  redis:
    image: redis:7
    container_name: monorepo_redis
    ports:
      - '6380:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli ping | grep PONG']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    command: redis-server --appendonly yes

  minio:
    image: minio/minio:RELEASE.2024-06-13T22-53-53Z
    container_name: monorepo_minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio_data:/data
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'curl -f http://localhost:9000/minio/health/live || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    command: server /data --console-address ":9001"

  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v24.1.2
    container_name: monorepo_redpanda
    ports:
      - '9092:9092'
      - '9644:9644'
    volumes:
      - redpanda_data:/var/lib/redpanda/data
    healthcheck:
      test: ['CMD-SHELL', 'rpk cluster info']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    command:
      - redpanda
      - start
      - --kafka-addr=0.0.0.0:9092
      - --advertise-kafka-addr=localhost:9092
      - --pandaproxy-addr=0.0.0.0:8082
      - --advertise-pandaproxy-addr=localhost:8082
      - --schema-registry-addr=0.0.0.0:8081
      - --rpc-addr=0.0.0.0:33145
      - --advertise-rpc-addr=localhost:33145
      - --mode=dev-container
      - --smp=1
      - --memory=1G
      - --reserve-memory=0M
      - --overprovisioned
      - --node-id=0
      - --set redpanda.disable_metrics=true
      - --set redpanda.disable_admin_api=false
      - --set redpanda.admin_api_doc_dir=/usr/share/redpanda/admin-api-doc

  # API Gateway
  kong:
    image: kong:3.4
    container_name: monorepo_kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
    ports:
      - "8004:8000"
      - "8005:8001"
    volumes:
      - ../../apps/gateway/kong.yml:/kong/kong.yml:ro
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 5s
    restart: unless-stopped

  # S1 Core Services
  auth-svc:
    build:
      context: ../../services/auth-svc
      dockerfile: Dockerfile
    container_name: monorepo_auth_svc
    environment:
      DATABASE_URL: "postgresql://postgres:password@postgres:5432/monorepo"
      REDIS_URL: "redis://redis:6379"
      JWT_SECRET: "dev-secret-key"
      PORT: "8081"
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  tenant-svc:
    build:
      context: ../../services/tenant-svc
      dockerfile: Dockerfile
    container_name: monorepo_tenant_svc
    environment:
      DATABASE_URL: "postgresql://postgres:password@postgres:5432/monorepo"
      AUTH_SERVICE_URL: "http://auth-svc:8081"
      PORT: "8082"
    ports:
      - "8082:8082"
    depends_on:
      postgres:
        condition: service_healthy
      auth-svc:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  payment-svc:
    build:
      context: ../../services/payment-svc
      dockerfile: Dockerfile
    container_name: monorepo_payment_svc
    environment:
      DATABASE_URL: "postgresql://postgres:password@postgres:5432/monorepo"
      STRIPE_SECRET_KEY: "sk_test_dev"
      STRIPE_WEBHOOK_SECRET: "whsec_dev"
      PORT: "8083"
    ports:
      - "8083:8083"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  learner-svc:
    build:
      context: ../../services/learner-svc
      dockerfile: Dockerfile
    container_name: monorepo_learner_svc
    environment:
      DATABASE_URL: "postgresql://postgres:password@postgres:5432/monorepo"
      AUTH_SERVICE_URL: "http://auth-svc:8081"
      TENANT_SERVICE_URL: "http://tenant-svc:8082"
      PORT: "8084"
    ports:
      - "8084:8084"
    depends_on:
      postgres:
        condition: service_healthy
      auth-svc:
        condition: service_healthy
      tenant-svc:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  enrollment-router-svc:
    build:
      context: ../../services/enrollment-router-svc
      dockerfile: Dockerfile
    container_name: monorepo_enrollment_router_svc
    environment:
      DATABASE_URL: "postgresql://postgres:password@postgres:5432/monorepo"
      LEARNER_SERVICE_URL: "http://learner-svc:8084"
      TENANT_SERVICE_URL: "http://tenant-svc:8082"
      PORT: "8085"
    ports:
      - "8085:8085"
    depends_on:
      postgres:
        condition: service_healthy
      learner-svc:
        condition: service_healthy
      tenant-svc:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  assessment-svc:
    build:
      context: ../../services/assessment-svc
      dockerfile: Dockerfile
    container_name: monorepo_assessment_svc
    environment:
      DATABASE_URL: "postgresql://postgres:password@postgres:5432/monorepo"
      LEARNER_SERVICE_URL: "http://learner-svc:8084"
      INFERENCE_GATEWAY_URL: "http://inference-gateway-svc:8086"
      PORT: "8087"
    ports:
      - "8087:8087"
    depends_on:
      postgres:
        condition: service_healthy
      learner-svc:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  inference-gateway-svc:
    build:
      context: ../../services/inference-gateway-svc
      dockerfile: Dockerfile
    container_name: monorepo_inference_gateway_svc
    environment:
      DATABASE_URL: "postgresql://postgres:password@postgres:5432/monorepo"
      REDIS_URL: "redis://redis:6379"
      OPENAI_API_KEY: "sk-test-key"
      PORT: "8086"
    ports:
      - "8086:8086"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  iep-svc:
    build:
      context: ../../services/iep-svc
      dockerfile: Dockerfile
    container_name: monorepo_iep_svc
    environment:
      DATABASE_URL: "postgresql://postgres:password@postgres:5432/monorepo"
      LEARNER_SERVICE_URL: "http://learner-svc:8084"
      ASSESSMENT_SERVICE_URL: "http://assessment-svc:8087"
      APPROVAL_SERVICE_URL: "http://approval-svc:8088"
      PORT: "8089"
    ports:
      - "8089:8089"
    depends_on:
      postgres:
        condition: service_healthy
      learner-svc:
        condition: service_healthy
      assessment-svc:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8089/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  approval-svc:
    build:
      context: ../../services/approval-svc
      dockerfile: Dockerfile
    container_name: monorepo_approval_svc
    environment:
      DATABASE_URL: "postgresql://postgres:password@postgres:5432/monorepo"
      NOTIFICATION_SERVICE_URL: "http://notification-svc:8090"
      PORT: "8088"
    ports:
      - "8088:8088"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  notification-svc:
    build:
      context: ../../services/notification-svc
      dockerfile: Dockerfile
    container_name: monorepo_notification_svc
    environment:
      SMTP_HOST: "mailhog"
      SMTP_PORT: "1025"
      SMTP_USER: ""
      SMTP_PASSWORD: ""
      FROM_EMAIL: "noreply@aivo.ai"
      PORT: "8090"
    ports:
      - "8090:8090"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  admin-portal-svc:
    build:
      context: ../../services/admin-portal-svc
      dockerfile: Dockerfile
    container_name: monorepo_admin_portal_svc
    environment:
      DATABASE_URL: "postgresql://postgres:password@postgres:5432/monorepo"
      AUTH_SERVICE_URL: "http://auth-svc:8081"
      TENANT_SERVICE_URL: "http://tenant-svc:8082"
      LEARNER_SERVICE_URL: "http://learner-svc:8084"
      PAYMENT_SERVICE_URL: "http://payment-svc:8083"
      PORT: "8092"
    ports:
      - "8092:8092"
    depends_on:
      postgres:
        condition: service_healthy
      auth-svc:
        condition: service_healthy
      tenant-svc:
        condition: service_healthy
      learner-svc:
        condition: service_healthy
      payment-svc:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8091/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  private-fm-orchestrator:
    build:
      context: ../../services/private-fm-orchestrator
      dockerfile: Dockerfile
    container_name: monorepo_private_fm_orchestrator
    environment:
      DATABASE_URL: "postgresql://postgres:password@postgres:5432/monorepo"
      REDIS_URL: "redis://redis:6379"
      KAFKA_BROKERS: "redpanda:9092"
      ASSESSMENT_SERVICE_URL: "http://assessment-svc:8087"
      IEP_SERVICE_URL: "http://iep-svc:8089"
      PORT: "8092"
    ports:
      - "8092:8092"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
      assessment-svc:
        condition: service_healthy
      iep-svc:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8092/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Stage-2 Pipeline Services: upload → ocr → topics → index → planner → game
  
  # 1. Upload Service (coursework-ingest-svc)
  coursework-ingest-svc:
    build:
      context: ../../services/coursework-ingest-svc
      dockerfile: Dockerfile
    container_name: monorepo_coursework_ingest_svc
    environment:
      DATABASE_URL: "postgresql://postgres:password@postgres:5432/monorepo"
      REDIS_URL: "redis://redis:6379"
      KAFKA_BROKERS: "redpanda:9092"
      MINIO_ENDPOINT: "minio:9000"
      MINIO_ACCESS_KEY: "minioadmin"
      MINIO_SECRET_KEY: "minioadmin"
      PORT: "8093"
    ports:
      - "8093:8093"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8093/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # 2. OCR Service (subject-brain-svc handles content processing)
  subject-brain-svc:
    build:
      context: ../../services/subject-brain-svc
      dockerfile: Dockerfile
    container_name: monorepo_subject_brain_svc
    environment:
      DATABASE_URL: "postgresql://postgres:password@postgres:5432/monorepo"
      REDIS_URL: "redis://redis:6379"
      KAFKA_BROKERS: "redpanda:9092"
      MINIO_ENDPOINT: "minio:9000"
      MINIO_ACCESS_KEY: "minioadmin"
      MINIO_SECRET_KEY: "minioadmin"
      INFERENCE_GATEWAY_URL: "http://inference-gateway-svc:8086"
      PORT: "8094"
    ports:
      - "8094:8094"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
      minio:
        condition: service_healthy
      coursework-ingest-svc:
        condition: service_healthy
      inference-gateway-svc:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8094/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # 3. Topics/Indexing Service (search-svc handles content indexing)
  search-svc:
    build:
      context: ../../services/search-svc
      dockerfile: Dockerfile
    container_name: monorepo_search_svc
    environment:
      DATABASE_URL: "postgresql://postgres:password@postgres:5432/monorepo"
      REDIS_URL: "redis://redis:6379"
      KAFKA_BROKERS: "redpanda:9092"
      PORT: "8095"
    ports:
      - "8095:8095"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
      subject-brain-svc:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8095/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # 4. Lesson Planning Service (lesson-registry-svc)
  lesson-registry-svc:
    build:
      context: ../../services/lesson-registry-svc
      dockerfile: Dockerfile
    container_name: monorepo_lesson_registry_svc
    environment:
      DATABASE_URL: "postgresql://postgres:password@postgres:5432/monorepo"
      REDIS_URL: "redis://redis:6379"
      KAFKA_BROKERS: "redpanda:9092"
      SEARCH_SERVICE_URL: "http://search-svc:8095"
      PORT: "8096"
    ports:
      - "8096:8096"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
      search-svc:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8096/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # 5. Game Generation Service (game-gen-svc)
  game-gen-svc:
    build:
      context: ../../services/game-gen-svc
      dockerfile: Dockerfile
    container_name: monorepo_game_gen_svc
    environment:
      DATABASE_URL: "postgresql://postgres:password@postgres:5432/monorepo"
      REDIS_URL: "redis://redis:6379"
      KAFKA_BROKERS: "redpanda:9092"
      MINIO_ENDPOINT: "minio:9000"
      MINIO_ACCESS_KEY: "minioadmin"
      MINIO_SECRET_KEY: "minioadmin"
      LESSON_REGISTRY_URL: "http://lesson-registry-svc:8096"
      INFERENCE_GATEWAY_URL: "http://inference-gateway-svc:8086"
      PORT: "8097"
    ports:
      - "8097:8097"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
      minio:
        condition: service_healthy
      lesson-registry-svc:
        condition: service_healthy
      inference-gateway-svc:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8097/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Supporting S2 Services
  
  # Analytics Service (for pipeline monitoring and visibility)
  analytics-svc:
    build:
      context: ../../services/analytics-svc
      dockerfile: Dockerfile
    container_name: monorepo_analytics_svc
    environment:
      DATABASE_URL: "postgresql://postgres:password@postgres:5432/monorepo"
      REDIS_URL: "redis://redis:6379"
      KAFKA_BROKERS: "redpanda:9092"
      PORT: "8098"
    ports:
      - "8098:8098"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8098/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Event Collector Service (for tracking pipeline events)
  event-collector-svc:
    build:
      context: ../../services/event-collector-svc
      dockerfile: Dockerfile
    container_name: monorepo_event_collector_svc
    environment:
      DATABASE_URL: "postgresql://postgres:password@postgres:5432/monorepo"
      REDIS_URL: "redis://redis:6379"
      KAFKA_BROKERS: "redpanda:9092"
      PORT: "8099"
    ports:
      - "8099:8099"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8099/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Development Tools
  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: monorepo_mailhog
    ports:
      - "1025:1025"
      - "8091:8025"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8025"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  redpanda_data:
    driver: local

networks:
  default:
    name: monorepo_infra
    driver: bridge
