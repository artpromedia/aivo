# Envoy Bootstrap Configuration for gRPC Mesh
# This configuration sets up Envoy as a sidecar proxy for internal gRPC communication
# with mTLS, circuit breakers, retries, and observability

admin:
  address:
    socket_address:
      protocol: TCP
      address: 127.0.0.1
      port_value: 9901

node:
  cluster: mesh-cluster
  id: ${SERVICE_NAME:-unknown}
  metadata:
    service: ${SERVICE_NAME:-unknown}
    version: ${SERVICE_VERSION:-unknown}

static_resources:
  listeners:
    - name: grpc_listener
      address:
        socket_address:
          protocol: TCP
          address: 0.0.0.0
          port_value: ${GRPC_PORT:-50051}

      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                '@type': type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: grpc_mesh
                codec_type: HTTP2

                # Request timeout and idle timeout
                request_timeout: 30s
                stream_idle_timeout: 300s

                # Tracing configuration
                tracing:
                  provider:
                    name: envoy.tracers.opentelemetry
                    typed_config:
                      '@type': type.googleapis.com/envoy.extensions.tracers.opentelemetry.v3.OpenTelemetryConfig
                      grpc_service:
                        envoy_grpc:
                          cluster_name: jaeger_cluster
                        timeout: 0.250s
                      service_name: ${SERVICE_NAME:-unknown}

                # Access logging
                access_log:
                  - name: envoy.access_loggers.stdout
                    typed_config:
                      '@type': type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog

                route_config:
                  name: grpc_routes
                  virtual_hosts:
                    - name: grpc_service
                      domains: ['*']
                      routes:
                        - match:
                            prefix: '/'
                            grpc: {}
                          route:
                            cluster: local_service
                            timeout: 15s
                            retry_policy:
                              retry_on: '5xx,reset,connect-failure,refused-stream'
                              num_retries: 3
                              retry_host_predicate:
                                - name: envoy.retry_host_predicates.previous_hosts
                              per_try_timeout: 5s
                              retry_back_off:
                                base_interval: 0.1s
                                max_interval: 1s

                http_filters:
                  - name: envoy.filters.http.grpc_stats
                    typed_config:
                      '@type': type.googleapis.com/envoy.extensions.filters.http.grpc_stats.v3.FilterConfig
                      emit_filter_state: true
                      enable_upstream_stats: true

                  - name: envoy.filters.http.fault
                    typed_config:
                      '@type': type.googleapis.com/envoy.extensions.filters.http.fault.v3.HTTPFault
                      # Fault injection for testing (disabled by default)

                  - name: envoy.filters.http.router

          # mTLS configuration
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              '@type': type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                tls_certificates:
                  - certificate_chain:
                      filename: /etc/ssl/certs/service.crt
                    private_key:
                      filename: /etc/ssl/private/service.key
                validation_context:
                  trusted_ca:
                    filename: /etc/ssl/certs/ca.crt
                  verify_certificate_spki: []
                  verify_certificate_hash: []
              require_client_certificate: true

  clusters:
    - name: local_service
      connect_timeout: 2s
      type: STATIC
      lb_policy: ROUND_ROBIN
      http2_protocol_options: {}

      # Circuit breaker settings
      circuit_breakers:
        thresholds:
          - priority: DEFAULT
            max_connections: 1000
            max_pending_requests: 100
            max_requests: 1000
            max_retries: 10
            retry_budget:
              budget_percent:
                value: 25.0
              min_retry_concurrency: 3
            track_remaining: true
            max_connection_pools: 10

      # Health checking
      health_checks:
        - timeout: 5s
          interval: 30s
          unhealthy_threshold: 3
          healthy_threshold: 2
          grpc_health_check:
            service_name: '' # Empty for overall health

      load_assignment:
        cluster_name: local_service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: ${LOCAL_SERVICE_PORT:-8080}

      # Upstream TLS for inter-service communication
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          '@type': type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          common_tls_context:
            tls_certificates:
              - certificate_chain:
                  filename: /etc/ssl/certs/service.crt
                private_key:
                  filename: /etc/ssl/private/service.key
            validation_context:
              trusted_ca:
                filename: /etc/ssl/certs/ca.crt
              match_typed_subject_alt_names:
                - san_type: DNS
                  matcher:
                    exact: ${PEER_SERVICE_NAME:-peer-service}

    # Service discovery cluster (dynamic cluster management)
    - name: service_discovery
      connect_timeout: 2s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: service_discovery
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: ${DISCOVERY_HOST:-consul}
                      port_value: ${DISCOVERY_PORT:-8500}

    # Jaeger tracing cluster
    - name: jaeger_cluster
      connect_timeout: 1s
      type: STATIC
      lb_policy: ROUND_ROBIN
      http2_protocol_options: {}
      load_assignment:
        cluster_name: jaeger_cluster
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: ${JAEGER_HOST:-jaeger}
                      port_value: ${JAEGER_PORT:-14250}

    # Metrics service cluster for Prometheus/StatsD
    - name: metrics_service
      connect_timeout: 1s
      type: STATIC
      lb_policy: ROUND_ROBIN
      http2_protocol_options: {}
      load_assignment:
        cluster_name: metrics_service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: ${METRICS_HOST:-prometheus}
                      port_value: ${METRICS_PORT:-9090}

# Dynamic configuration from service discovery
dynamic_resources:
  cds_config:
    resource_api_version: V3
    api_config_source:
      api_type: GRPC
      transport_api_version: V3
      grpc_services:
        - envoy_grpc:
            cluster_name: service_discovery
      set_node_on_first_message: true

  lds_config:
    resource_api_version: V3
    api_config_source:
      api_type: GRPC
      transport_api_version: V3
      grpc_services:
        - envoy_grpc:
            cluster_name: service_discovery
      set_node_on_first_message: true

# Stats and metrics
stats_sinks:
  - name: envoy.stat_sinks.metrics_service
    typed_config:
      '@type': type.googleapis.com/envoy.extensions.stat_sinks.metrics_service.v3.MetricsServiceConfig
      transport_api_version: V3
      grpc_service:
        envoy_grpc:
          cluster_name: metrics_service
      emit_tags_as_labels: true

stats_config:
  stats_tags:
    - tag_name: service
      regex: "^cluster\\.(service_[^.]+)\\."
    - tag_name: method
      regex: "^cluster\\.([^.]+_grpc_[^.]+)\\."
    - tag_name: status
      regex: "^cluster\\.[^.]+\\.grpc\\.[^.]+\\.([^.]+)\\."

# Layered runtime for feature flags
layered_runtime:
  layers:
    - name: static_layer_0
      static_layer:
        envoy:
          resource_limits:
            listener:
              connection_limit: 10000
        overload:
          global_downstream_max_connections: 50000
