services:
  # Service Discovery (Consul)
  consul:
    image: hashicorp/consul:1.17
    container_name: mesh_consul
    ports:
      - '8500:8500'
      - '8600:8600/udp'
    environment:
      - CONSUL_BIND_INTERFACE=eth0
    command: >
      consul agent
      -server
      -bootstrap-expect=1
      -ui-config-enabled
      -client=0.0.0.0
      -bind=0.0.0.0
      -data-dir=/consul/data
      -log-level=INFO
      -node=consul-1
      -datacenter=mesh-dc
    volumes:
      - consul_data:/consul/data
      - ./consul:/consul/config:ro
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'consul', 'members']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Distributed Tracing (Jaeger)
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: mesh_jaeger
    ports:
      - '14250:14250' # gRPC
      - '14268:14268' # HTTP
      - '16686:16686' # UI
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - LOG_LEVEL=info
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:14269/',
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Metrics Collection (Prometheus)
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: mesh_prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:9090/-/healthy',
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Metrics Visualization (Grafana)
  grafana:
    image: grafana/grafana:10.2.0
    container_name: mesh_grafana
    ports:
      - '3000:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana:/etc/grafana/provisioning:ro
    restart: unless-stopped
    depends_on:
      - prometheus
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # StatsD for metrics aggregation
  statsd:
    image: graphiteapp/graphite-statsd:1.1.10-5
    container_name: mesh_statsd
    ports:
      - '8125:8125/udp' # StatsD
      - '8126:8126' # StatsD admin
      - '2003:2003' # Carbon receiver
      - '2004:2004' # Carbon receiver
      - '8080:8080' # Graphite web
    environment:
      - GRAPHITE_TIME_ZONE=UTC
    volumes:
      - graphite_data:/opt/graphite/storage
    restart: unless-stopped

  # Certificate Authority Service (for development)
  cert-manager:
    build:
      context: ./cert-manager
      dockerfile: Dockerfile
    container_name: mesh_cert_manager
    ports:
      - '8443:8443'
    volumes:
      - ./certs:/app/certs
      - ./scripts:/app/scripts:ro
    environment:
      - CA_VALIDITY_DAYS=3650
      - CERT_VALIDITY_DAYS=365
      - KEY_SIZE=2048
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-k', '-f', 'https://localhost:8443/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # Event Collector with Envoy Sidecar
  event-collector-svc:
    build:
      context: ../../services/event-collector-svc
      dockerfile: Dockerfile
    container_name: event_collector_service
    ports:
      - '8000:8000' # HTTP API
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=monorepo
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - GRPC_HOST=0.0.0.0
      - GRPC_PORT=50051
      - LOCAL_SERVICE_PORT=8000
    volumes:
      - ./certs/ca:/etc/ssl/certs:ro
      - ./certs/services/event-collector-svc.crt:/etc/ssl/certs/service.crt:ro
      - ./certs/services/event-collector-svc-key.pem:/etc/ssl/private/service.key:ro
    depends_on:
      - consul
      - jaeger
    restart: unless-stopped

  # Envoy sidecar for event-collector-svc
  event-collector-envoy:
    image: envoyproxy/envoy:v1.28.0
    container_name: event_collector_envoy
    ports:
      - '9901:9901' # Admin
      - '50051:50051' # gRPC
    volumes:
      - ./envoy/bootstrap.yaml:/etc/envoy/envoy.yaml:ro
      - ./certs/ca:/etc/ssl/certs:ro
      - ./certs/services/event-collector-svc.crt:/etc/ssl/certs/service.crt:ro
      - ./certs/services/event-collector-svc-key.pem:/etc/ssl/private/service.key:ro
    environment:
      - SERVICE_NAME=event-collector-svc
      - SERVICE_VERSION=1.0.0
      - GRPC_PORT=50051
      - LOCAL_SERVICE_PORT=8000
      - DISCOVERY_HOST=consul
      - DISCOVERY_PORT=8500
      - JAEGER_HOST=jaeger
      - JAEGER_PORT=14250
    depends_on:
      - event-collector-svc
      - consul
      - jaeger
    restart: unless-stopped

  # Example: Auth Service (placeholder)
  auth-svc:
    image: busybox:latest
    container_name: auth_service
    command: >
      sh -c "
        echo 'Auth service placeholder - implement gRPC server here';
        sleep infinity
      "
    ports:
      - '8001:8000'
    volumes:
      - ./certs/ca:/etc/ssl/certs:ro
      - ./certs/services/auth-svc.crt:/etc/ssl/certs/service.crt:ro
      - ./certs/services/auth-svc-key.pem:/etc/ssl/private/service.key:ro
    restart: unless-stopped

  # Envoy sidecar for auth-svc
  auth-envoy:
    image: envoyproxy/envoy:v1.28.0
    container_name: auth_envoy
    ports:
      - '9902:9901' # Admin
      - '50052:50051' # gRPC
    volumes:
      - ./envoy/bootstrap.yaml:/etc/envoy/envoy.yaml:ro
      - ./certs/ca:/etc/ssl/certs:ro
      - ./certs/services/auth-svc.crt:/etc/ssl/certs/service.crt:ro
      - ./certs/services/auth-svc-key.pem:/etc/ssl/private/service.key:ro
    environment:
      - SERVICE_NAME=auth-svc
      - SERVICE_VERSION=1.0.0
      - GRPC_PORT=50051
      - LOCAL_SERVICE_PORT=8000
      - DISCOVERY_HOST=consul
      - DISCOVERY_PORT=8500
      - JAEGER_HOST=jaeger
      - JAEGER_PORT=14250
    depends_on:
      - auth-svc
      - consul
      - jaeger
    restart: unless-stopped

  # Load balancer and ingress (for testing)
  nginx:
    image: nginx:1.25-alpine
    container_name: mesh_nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx:/etc/nginx/conf.d:ro
      - ./certs/ca:/etc/ssl/certs:ro
      - ./certs/mesh-client.crt:/etc/ssl/certs/client.crt:ro
      - ./certs/mesh-client-key.pem:/etc/ssl/private/client.key:ro
    depends_on:
      - event-collector-envoy
      - auth-envoy
    restart: unless-stopped

  # Message queue for async communication
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: mesh_kafka
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'kafka-broker-api-versions',
          '--bootstrap-server',
          'localhost:9092',
        ]
      interval: 30s
      timeout: 10s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: mesh_zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'nc', '-z', 'localhost', '2181']
      interval: 30s
      timeout: 10s
      retries: 5

  # Database
  postgres:
    image: postgres:16-alpine
    container_name: mesh_postgres
    ports:
      - '5432:5432'
    environment:
      POSTGRES_DB: monorepo
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d monorepo']
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  consul_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  graphite_data:
    driver: local
  postgres_data:
    driver: local

networks:
  default:
    name: grpc_mesh
    driver: bridge
