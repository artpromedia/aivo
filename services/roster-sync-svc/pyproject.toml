[tool.poetry]
name = "roster-sync-service"
version = "1.0.0"
description = "Roster synchronization service for OneRoster, Clever, and CSV imports with SCIM integration"
authors = ["Integrations Team <integrations@example.com>"]
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = ">=0.104.0"
uvicorn = {extras = ["standard"], version = ">=0.24.0"}
sqlalchemy = {extras = ["asyncio", "postgresql"], version = ">=2.0.0"}
asyncpg = "^0.29.0"
alembic = "^1.13.0"
pydantic = {extras = ["email"], version = ">=2.5.0"}
pydantic-settings = "^2.1.0"
httpx = "^0.25.0"
celery = {extras = ["redis"], version = "^5.3.0"}
redis = "^5.0.0"
pandas = "^2.1.0"
pyyaml = "^6.0.1"
jsonschema = "^4.20.0"
aiofiles = "^23.2.0"
python-multipart = "^0.0.6"
bcrypt = "^4.1.0"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
structlog = "^23.2.0"
prometheus-client = "^0.19.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
httpx = "^0.25.0"
black = "^23.11.0"
ruff = "^0.1.6"
mypy = "^1.7.0"
pre-commit = "^3.6.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.black]
target-version = ['py311']
line-length = 88
include = '\.pyi?$'

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
addopts = "--cov=app --cov-report=term-missing --cov-report=xml"

[tool.coverage.run]
source = ["app"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
