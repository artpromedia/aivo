# coding: utf-8

"""
    Admin Portal Aggregator API

    Read-only aggregator API for admin dashboard widgets and KPIs

    The version of the OpenAPI document: 1.0.0
    Contact: api-support@aivo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from aivo_sdk.models.subscription_details import SubscriptionDetails

class TestSubscriptionDetails(unittest.TestCase):
    """SubscriptionDetails unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SubscriptionDetails:
        """Test SubscriptionDetails
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SubscriptionDetails`
        """
        model = SubscriptionDetails()
        if include_optional:
            return SubscriptionDetails(
                tenant_id = '456e7890-e89b-12d3-a456-426614174000',
                plan = aivo_sdk.models.subscription_details_plan.SubscriptionDetails_plan(
                    name = 'Professional', 
                    tier = 'professional', 
                    features = [Advanced Analytics, API Access, Custom Branding, SSO], 
                    price_per_seat = 49.99, ),
                seats = aivo_sdk.models.subscription_details_seats.SubscriptionDetails_seats(
                    current = 200, 
                    included = 100, 
                    additional = 100, ),
                renewal = aivo_sdk.models.subscription_details_renewal.SubscriptionDetails_renewal(
                    next_billing_date = '2024-01-15', 
                    amount = 9999.0, 
                    currency = 'USD', 
                    auto_renew = True, 
                    days_until_renewal = 15, ),
                status = 'active',
                coupons = [
                    aivo_sdk.models.subscription_details_coupons_inner.SubscriptionDetails_coupons_inner(
                        code = 'WELCOME20', 
                        discount = '20% off', 
                        valid_until = '2024-01-31', 
                        status = 'active', )
                    ],
                discounts = [
                    aivo_sdk.models.subscription_details_discounts_inner.SubscriptionDetails_discounts_inner(
                        name = 'Annual Discount', 
                        type = 'percentage', 
                        value = 15.0, 
                        description = '15% discount for annual billing', )
                    ],
                trial_info = aivo_sdk.models.subscription_details_trial_info.SubscriptionDetails_trialInfo(
                    is_trialing = False, 
                    trial_ends_at = '2023-12-31T23:59:59Z', 
                    days_remaining = 0, ),
                last_updated = '2023-12-01T10:30:00Z'
            )
        else:
            return SubscriptionDetails(
                tenant_id = '456e7890-e89b-12d3-a456-426614174000',
                plan = aivo_sdk.models.subscription_details_plan.SubscriptionDetails_plan(
                    name = 'Professional', 
                    tier = 'professional', 
                    features = [Advanced Analytics, API Access, Custom Branding, SSO], 
                    price_per_seat = 49.99, ),
                seats = aivo_sdk.models.subscription_details_seats.SubscriptionDetails_seats(
                    current = 200, 
                    included = 100, 
                    additional = 100, ),
                renewal = aivo_sdk.models.subscription_details_renewal.SubscriptionDetails_renewal(
                    next_billing_date = '2024-01-15', 
                    amount = 9999.0, 
                    currency = 'USD', 
                    auto_renew = True, 
                    days_until_renewal = 15, ),
                status = 'active',
                last_updated = '2023-12-01T10:30:00Z',
        )
        """

    def testSubscriptionDetails(self):
        """Test SubscriptionDetails"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
