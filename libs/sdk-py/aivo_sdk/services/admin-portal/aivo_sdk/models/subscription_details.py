# coding: utf-8

"""
    Admin Portal Aggregator API

    Read-only aggregator API for admin dashboard widgets and KPIs

    The version of the OpenAPI document: 1.0.0
    Contact: api-support@aivo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from aivo_sdk.models.subscription_details_coupons_inner import SubscriptionDetailsCouponsInner
from aivo_sdk.models.subscription_details_discounts_inner import SubscriptionDetailsDiscountsInner
from aivo_sdk.models.subscription_details_plan import SubscriptionDetailsPlan
from aivo_sdk.models.subscription_details_renewal import SubscriptionDetailsRenewal
from aivo_sdk.models.subscription_details_seats import SubscriptionDetailsSeats
from aivo_sdk.models.subscription_details_trial_info import SubscriptionDetailsTrialInfo
from typing import Optional, Set
from typing_extensions import Self

class SubscriptionDetails(BaseModel):
    """
    SubscriptionDetails
    """ # noqa: E501
    tenant_id: StrictStr = Field(alias="tenantId")
    plan: SubscriptionDetailsPlan
    seats: SubscriptionDetailsSeats
    renewal: SubscriptionDetailsRenewal
    status: StrictStr
    coupons: Optional[List[SubscriptionDetailsCouponsInner]] = None
    discounts: Optional[List[SubscriptionDetailsDiscountsInner]] = None
    trial_info: Optional[SubscriptionDetailsTrialInfo] = Field(default=None, alias="trialInfo")
    last_updated: datetime = Field(alias="lastUpdated")
    __properties: ClassVar[List[str]] = ["tenantId", "plan", "seats", "renewal", "status", "coupons", "discounts", "trialInfo", "lastUpdated"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['active', 'past_due', 'canceled', 'trialing']):
            raise ValueError("must be one of enum values ('active', 'past_due', 'canceled', 'trialing')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of plan
        if self.plan:
            _dict['plan'] = self.plan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of seats
        if self.seats:
            _dict['seats'] = self.seats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of renewal
        if self.renewal:
            _dict['renewal'] = self.renewal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in coupons (list)
        _items = []
        if self.coupons:
            for _item_coupons in self.coupons:
                if _item_coupons:
                    _items.append(_item_coupons.to_dict())
            _dict['coupons'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in discounts (list)
        _items = []
        if self.discounts:
            for _item_discounts in self.discounts:
                if _item_discounts:
                    _items.append(_item_discounts.to_dict())
            _dict['discounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of trial_info
        if self.trial_info:
            _dict['trialInfo'] = self.trial_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tenantId": obj.get("tenantId"),
            "plan": SubscriptionDetailsPlan.from_dict(obj["plan"]) if obj.get("plan") is not None else None,
            "seats": SubscriptionDetailsSeats.from_dict(obj["seats"]) if obj.get("seats") is not None else None,
            "renewal": SubscriptionDetailsRenewal.from_dict(obj["renewal"]) if obj.get("renewal") is not None else None,
            "status": obj.get("status"),
            "coupons": [SubscriptionDetailsCouponsInner.from_dict(_item) for _item in obj["coupons"]] if obj.get("coupons") is not None else None,
            "discounts": [SubscriptionDetailsDiscountsInner.from_dict(_item) for _item in obj["discounts"]] if obj.get("discounts") is not None else None,
            "trialInfo": SubscriptionDetailsTrialInfo.from_dict(obj["trialInfo"]) if obj.get("trialInfo") is not None else None,
            "lastUpdated": obj.get("lastUpdated")
        })
        return _obj


