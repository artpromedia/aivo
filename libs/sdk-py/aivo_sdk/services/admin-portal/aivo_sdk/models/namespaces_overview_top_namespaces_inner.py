"""
Admin Portal Aggregator API

Read-only aggregator API for admin dashboard widgets and KPIs

The version of the OpenAPI document: 1.0.0
Contact: api-support@aivo.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator


class NamespacesOverviewTopNamespacesInner(BaseModel):
    """
    NamespacesOverviewTopNamespacesInner
    """  # noqa: E501

    namespace_id: StrictStr = Field(alias="namespaceId")
    learner_id: StrictStr = Field(alias="learnerId")
    learner_name: StrictStr | None = Field(default=None, alias="learnerName")
    status: StrictStr
    storage_used: StrictInt = Field(
        description="Storage used by this namespace (MB)", alias="storageUsed"
    )
    documents_count: StrictInt | None = Field(
        default=None, description="Number of documents in namespace", alias="documentsCount"
    )
    last_activity: datetime = Field(alias="lastActivity")
    vector_count: StrictInt | None = Field(
        default=None, description="Number of vectors in namespace", alias="vectorCount"
    )
    __properties: ClassVar[list[str]] = [
        "namespaceId",
        "learnerId",
        "learnerName",
        "status",
        "storageUsed",
        "documentsCount",
        "lastActivity",
        "vectorCount",
    ]

    @field_validator("status")
    def status_validate_enum(self, value):
        """Validates the enum"""
        if value not in set(["active", "inactive", "initializing", "error"]):
            raise ValueError(
                "must be one of enum values ('active', 'inactive', 'initializing', 'error')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of NamespacesOverviewTopNamespacesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of NamespacesOverviewTopNamespacesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "namespaceId": obj.get("namespaceId"),
                "learnerId": obj.get("learnerId"),
                "learnerName": obj.get("learnerName"),
                "status": obj.get("status"),
                "storageUsed": obj.get("storageUsed"),
                "documentsCount": obj.get("documentsCount"),
                "lastActivity": obj.get("lastActivity"),
                "vectorCount": obj.get("vectorCount"),
            }
        )
        return _obj
