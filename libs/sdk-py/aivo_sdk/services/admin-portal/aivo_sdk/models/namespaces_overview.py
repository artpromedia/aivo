"""
Admin Portal Aggregator API

Read-only aggregator API for admin dashboard widgets and KPIs

The version of the OpenAPI document: 1.0.0
Contact: api-support@aivo.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Annotated, Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr

from aivo_sdk.models.namespaces_overview_health_summary import NamespacesOverviewHealthSummary
from aivo_sdk.models.namespaces_overview_recent_activity import NamespacesOverviewRecentActivity
from aivo_sdk.models.namespaces_overview_status_counts import NamespacesOverviewStatusCounts
from aivo_sdk.models.namespaces_overview_storage_stats import NamespacesOverviewStorageStats
from aivo_sdk.models.namespaces_overview_top_namespaces_inner import (
    NamespacesOverviewTopNamespacesInner,
)


class NamespacesOverview(BaseModel):
    """
    NamespacesOverview
    """  # noqa: E501

    tenant_id: StrictStr = Field(alias="tenantId")
    total_namespaces: StrictInt = Field(
        description="Total number of learner private-brain namespaces", alias="totalNamespaces"
    )
    status_counts: NamespacesOverviewStatusCounts = Field(alias="statusCounts")
    storage_stats: NamespacesOverviewStorageStats | None = Field(default=None, alias="storageStats")
    top_namespaces: Annotated[list[NamespacesOverviewTopNamespacesInner], Field(max_length=10)] = (
        Field(description="Most active or largest namespaces", alias="topNamespaces")
    )
    recent_activity: NamespacesOverviewRecentActivity | None = Field(
        default=None, alias="recentActivity"
    )
    health_summary: NamespacesOverviewHealthSummary | None = Field(
        default=None, alias="healthSummary"
    )
    last_updated: datetime = Field(alias="lastUpdated")
    __properties: ClassVar[list[str]] = [
        "tenantId",
        "totalNamespaces",
        "statusCounts",
        "storageStats",
        "topNamespaces",
        "recentActivity",
        "healthSummary",
        "lastUpdated",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of NamespacesOverview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status_counts
        if self.status_counts:
            _dict["statusCounts"] = self.status_counts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storage_stats
        if self.storage_stats:
            _dict["storageStats"] = self.storage_stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in top_namespaces (list)
        _items = []
        if self.top_namespaces:
            for _item_top_namespaces in self.top_namespaces:
                if _item_top_namespaces:
                    _items.append(_item_top_namespaces.to_dict())
            _dict["topNamespaces"] = _items
        # override the default output from pydantic by calling `to_dict()` of recent_activity
        if self.recent_activity:
            _dict["recentActivity"] = self.recent_activity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of health_summary
        if self.health_summary:
            _dict["healthSummary"] = self.health_summary.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of NamespacesOverview from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "tenantId": obj.get("tenantId"),
                "totalNamespaces": obj.get("totalNamespaces"),
                "statusCounts": NamespacesOverviewStatusCounts.from_dict(obj["statusCounts"])
                if obj.get("statusCounts") is not None
                else None,
                "storageStats": NamespacesOverviewStorageStats.from_dict(obj["storageStats"])
                if obj.get("storageStats") is not None
                else None,
                "topNamespaces": [
                    NamespacesOverviewTopNamespacesInner.from_dict(_item)
                    for _item in obj["topNamespaces"]
                ]
                if obj.get("topNamespaces") is not None
                else None,
                "recentActivity": NamespacesOverviewRecentActivity.from_dict(obj["recentActivity"])
                if obj.get("recentActivity") is not None
                else None,
                "healthSummary": NamespacesOverviewHealthSummary.from_dict(obj["healthSummary"])
                if obj.get("healthSummary") is not None
                else None,
                "lastUpdated": obj.get("lastUpdated"),
            }
        )
        return _obj
