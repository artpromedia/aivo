"""
Admin Portal Aggregator API

Read-only aggregator API for admin dashboard widgets and KPIs

The version of the OpenAPI document: 1.0.0
Contact: api-support@aivo.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, Field

from aivo_sdk.models.usage_analytics_trends_daily_activity_inner import (
    UsageAnalyticsTrendsDailyActivityInner,
)
from aivo_sdk.models.usage_analytics_trends_peak_hours_inner import (
    UsageAnalyticsTrendsPeakHoursInner,
)


class UsageAnalyticsTrends(BaseModel):
    """
    UsageAnalyticsTrends
    """  # noqa: E501

    daily_activity: list[UsageAnalyticsTrendsDailyActivityInner] | None = Field(
        default=None, alias="dailyActivity"
    )
    peak_hours: list[UsageAnalyticsTrendsPeakHoursInner] | None = Field(
        default=None, description="Learning activity by hour of day", alias="peakHours"
    )
    __properties: ClassVar[list[str]] = ["dailyActivity", "peakHours"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of UsageAnalyticsTrends from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in daily_activity (list)
        _items = []
        if self.daily_activity:
            for _item_daily_activity in self.daily_activity:
                if _item_daily_activity:
                    _items.append(_item_daily_activity.to_dict())
            _dict["dailyActivity"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in peak_hours (list)
        _items = []
        if self.peak_hours:
            for _item_peak_hours in self.peak_hours:
                if _item_peak_hours:
                    _items.append(_item_peak_hours.to_dict())
            _dict["peakHours"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of UsageAnalyticsTrends from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "dailyActivity": [
                    UsageAnalyticsTrendsDailyActivityInner.from_dict(_item)
                    for _item in obj["dailyActivity"]
                ]
                if obj.get("dailyActivity") is not None
                else None,
                "peakHours": [
                    UsageAnalyticsTrendsPeakHoursInner.from_dict(_item)
                    for _item in obj["peakHours"]
                ]
                if obj.get("peakHours") is not None
                else None,
            }
        )
        return _obj
