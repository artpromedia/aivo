# coding: utf-8

"""
    Admin Portal Aggregator API

    Read-only aggregator API for admin dashboard widgets and KPIs

    The version of the OpenAPI document: 1.0.0
    Contact: api-support@aivo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from aivo_sdk.models.team_overview_pending_invites import TeamOverviewPendingInvites
from aivo_sdk.models.team_overview_recent_activity import TeamOverviewRecentActivity
from aivo_sdk.models.team_overview_top_users_inner import TeamOverviewTopUsersInner
from aivo_sdk.models.team_overview_users_by_role import TeamOverviewUsersByRole
from typing import Optional, Set
from typing_extensions import Self

class TeamOverview(BaseModel):
    """
    TeamOverview
    """ # noqa: E501
    tenant_id: StrictStr = Field(alias="tenantId")
    users_by_role: TeamOverviewUsersByRole = Field(alias="usersByRole")
    pending_invites: TeamOverviewPendingInvites = Field(alias="pendingInvites")
    recent_activity: TeamOverviewRecentActivity = Field(alias="recentActivity")
    top_users: Optional[Annotated[List[TeamOverviewTopUsersInner], Field(max_length=10)]] = Field(default=None, description="Most active users in the tenant", alias="topUsers")
    last_updated: datetime = Field(alias="lastUpdated")
    __properties: ClassVar[List[str]] = ["tenantId", "usersByRole", "pendingInvites", "recentActivity", "topUsers", "lastUpdated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TeamOverview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of users_by_role
        if self.users_by_role:
            _dict['usersByRole'] = self.users_by_role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pending_invites
        if self.pending_invites:
            _dict['pendingInvites'] = self.pending_invites.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recent_activity
        if self.recent_activity:
            _dict['recentActivity'] = self.recent_activity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in top_users (list)
        _items = []
        if self.top_users:
            for _item_top_users in self.top_users:
                if _item_top_users:
                    _items.append(_item_top_users.to_dict())
            _dict['topUsers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TeamOverview from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tenantId": obj.get("tenantId"),
            "usersByRole": TeamOverviewUsersByRole.from_dict(obj["usersByRole"]) if obj.get("usersByRole") is not None else None,
            "pendingInvites": TeamOverviewPendingInvites.from_dict(obj["pendingInvites"]) if obj.get("pendingInvites") is not None else None,
            "recentActivity": TeamOverviewRecentActivity.from_dict(obj["recentActivity"]) if obj.get("recentActivity") is not None else None,
            "topUsers": [TeamOverviewTopUsersInner.from_dict(_item) for _item in obj["topUsers"]] if obj.get("topUsers") is not None else None,
            "lastUpdated": obj.get("lastUpdated")
        })
        return _obj


