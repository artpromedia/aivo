"""
Admin Portal Aggregator API

Read-only aggregator API for admin dashboard widgets and KPIs

The version of the OpenAPI document: 1.0.0
Contact: api-support@aivo.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Self

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)

from aivo_sdk.models.usage_analytics_active_learners import UsageAnalyticsActiveLearners
from aivo_sdk.models.usage_analytics_completion_stats import UsageAnalyticsCompletionStats
from aivo_sdk.models.usage_analytics_engagement import UsageAnalyticsEngagement
from aivo_sdk.models.usage_analytics_subject_mix_inner import UsageAnalyticsSubjectMixInner
from aivo_sdk.models.usage_analytics_trends import UsageAnalyticsTrends


class UsageAnalytics(BaseModel):
    """
    UsageAnalytics
    """  # noqa: E501

    tenant_id: StrictStr = Field(alias="tenantId")
    range: StrictStr = Field(description="Time range for this analytics data")
    total_minutes_learned: StrictInt = Field(
        description="Total learning minutes in the specified range", alias="totalMinutesLearned"
    )
    active_learners: UsageAnalyticsActiveLearners = Field(alias="activeLearners")
    average_session_length: StrictFloat | StrictInt | None = Field(
        default=None,
        description="Average learning session length in minutes",
        alias="averageSessionLength",
    )
    completion_stats: UsageAnalyticsCompletionStats | None = Field(
        default=None, alias="completionStats"
    )
    subject_mix: list[UsageAnalyticsSubjectMixInner] = Field(
        description="Breakdown of learning time by subject", alias="subjectMix"
    )
    trends: UsageAnalyticsTrends
    engagement: UsageAnalyticsEngagement | None = None
    last_updated: datetime = Field(alias="lastUpdated")
    __properties: ClassVar[list[str]] = [
        "tenantId",
        "range",
        "totalMinutesLearned",
        "activeLearners",
        "averageSessionLength",
        "completionStats",
        "subjectMix",
        "trends",
        "engagement",
        "lastUpdated",
    ]

    @field_validator("range")
    def range_validate_enum(self, value):
        """Validates the enum"""
        if value not in set(["7d", "30d", "90d", "1y"]):
            raise ValueError("must be one of enum values ('7d', '30d', '90d', '1y')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of UsageAnalytics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of active_learners
        if self.active_learners:
            _dict["activeLearners"] = self.active_learners.to_dict()
        # override the default output from pydantic by calling `to_dict()` of completion_stats
        if self.completion_stats:
            _dict["completionStats"] = self.completion_stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in subject_mix (list)
        _items = []
        if self.subject_mix:
            for _item_subject_mix in self.subject_mix:
                if _item_subject_mix:
                    _items.append(_item_subject_mix.to_dict())
            _dict["subjectMix"] = _items
        # override the default output from pydantic by calling `to_dict()` of trends
        if self.trends:
            _dict["trends"] = self.trends.to_dict()
        # override the default output from pydantic by calling `to_dict()` of engagement
        if self.engagement:
            _dict["engagement"] = self.engagement.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of UsageAnalytics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "tenantId": obj.get("tenantId"),
                "range": obj.get("range"),
                "totalMinutesLearned": obj.get("totalMinutesLearned"),
                "activeLearners": UsageAnalyticsActiveLearners.from_dict(obj["activeLearners"])
                if obj.get("activeLearners") is not None
                else None,
                "averageSessionLength": obj.get("averageSessionLength"),
                "completionStats": UsageAnalyticsCompletionStats.from_dict(obj["completionStats"])
                if obj.get("completionStats") is not None
                else None,
                "subjectMix": [
                    UsageAnalyticsSubjectMixInner.from_dict(_item) for _item in obj["subjectMix"]
                ]
                if obj.get("subjectMix") is not None
                else None,
                "trends": UsageAnalyticsTrends.from_dict(obj["trends"])
                if obj.get("trends") is not None
                else None,
                "engagement": UsageAnalyticsEngagement.from_dict(obj["engagement"])
                if obj.get("engagement") is not None
                else None,
                "lastUpdated": obj.get("lastUpdated"),
            }
        )
        return _obj
