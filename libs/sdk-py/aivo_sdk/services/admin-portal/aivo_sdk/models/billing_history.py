"""
Admin Portal Aggregator API

Read-only aggregator API for admin dashboard widgets and KPIs

The version of the OpenAPI document: 1.0.0
Contact: api-support@aivo.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, Field, StrictStr

from aivo_sdk.models.billing_history_invoices_inner import BillingHistoryInvoicesInner
from aivo_sdk.models.billing_history_summary import BillingHistorySummary
from aivo_sdk.models.billing_history_webhooks_status import BillingHistoryWebhooksStatus


class BillingHistory(BaseModel):
    """
    BillingHistory
    """  # noqa: E501

    tenant_id: StrictStr = Field(alias="tenantId")
    invoices: list[BillingHistoryInvoicesInner]
    summary: BillingHistorySummary | None = None
    webhooks_status: BillingHistoryWebhooksStatus = Field(alias="webhooksStatus")
    last_updated: datetime = Field(alias="lastUpdated")
    __properties: ClassVar[list[str]] = [
        "tenantId",
        "invoices",
        "summary",
        "webhooksStatus",
        "lastUpdated",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of BillingHistory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in invoices (list)
        _items = []
        if self.invoices:
            for _item_invoices in self.invoices:
                if _item_invoices:
                    _items.append(_item_invoices.to_dict())
            _dict["invoices"] = _items
        # override the default output from pydantic by calling `to_dict()` of summary
        if self.summary:
            _dict["summary"] = self.summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of webhooks_status
        if self.webhooks_status:
            _dict["webhooksStatus"] = self.webhooks_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of BillingHistory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "tenantId": obj.get("tenantId"),
                "invoices": [
                    BillingHistoryInvoicesInner.from_dict(_item) for _item in obj["invoices"]
                ]
                if obj.get("invoices") is not None
                else None,
                "summary": BillingHistorySummary.from_dict(obj["summary"])
                if obj.get("summary") is not None
                else None,
                "webhooksStatus": BillingHistoryWebhooksStatus.from_dict(obj["webhooksStatus"])
                if obj.get("webhooksStatus") is not None
                else None,
                "lastUpdated": obj.get("lastUpdated"),
            }
        )
        return _obj
