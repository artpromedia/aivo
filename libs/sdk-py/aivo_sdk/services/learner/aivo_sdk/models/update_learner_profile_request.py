"""
Learner Management API

Learner profile and learning data management service

The version of the OpenAPI document: 1.0.0
Contact: api-support@aivo.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Annotated, Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, Field, StrictStr

from aivo_sdk.models.update_learner_profile_request_preferences import (
    UpdateLearnerProfileRequestPreferences,
)


class UpdateLearnerProfileRequest(BaseModel):
    """
    UpdateLearnerProfileRequest
    """  # noqa: E501

    bio: Annotated[str, Field(strict=True, max_length=500)] | None = None
    preferences: UpdateLearnerProfileRequestPreferences | None = None
    interests: list[StrictStr] | None = None
    __properties: ClassVar[list[str]] = ["bio", "preferences", "interests"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of UpdateLearnerProfileRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of preferences
        if self.preferences:
            _dict["preferences"] = self.preferences.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of UpdateLearnerProfileRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "bio": obj.get("bio"),
                "preferences": UpdateLearnerProfileRequestPreferences.from_dict(obj["preferences"])
                if obj.get("preferences") is not None
                else None,
                "interests": obj.get("interests"),
            }
        )
        return _obj
