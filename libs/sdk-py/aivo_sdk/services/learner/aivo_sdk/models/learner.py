# coding: utf-8

"""
    Learner Management API

    Learner profile and learning data management service

    The version of the OpenAPI document: 1.0.0
    Contact: api-support@aivo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Learner(BaseModel):
    """
    Learner
    """ # noqa: E501
    id: StrictStr
    tenant_id: StrictStr = Field(alias="tenantId")
    email: StrictStr
    first_name: StrictStr = Field(alias="firstName")
    last_name: StrictStr = Field(alias="lastName")
    status: StrictStr
    avatar: Optional[StrictStr] = None
    timezone: Optional[StrictStr] = None
    language: Optional[StrictStr] = None
    department: Optional[StrictStr] = None
    job_title: Optional[StrictStr] = Field(default=None, alias="jobTitle")
    manager: Optional[StrictStr] = None
    last_login_at: Optional[datetime] = Field(default=None, alias="lastLoginAt")
    enrollment_count: Optional[StrictInt] = Field(default=None, alias="enrollmentCount")
    completion_count: Optional[StrictInt] = Field(default=None, alias="completionCount")
    total_learning_minutes: Optional[StrictInt] = Field(default=None, alias="totalLearningMinutes")
    metadata: Optional[Dict[str, Any]] = None
    created_at: datetime = Field(alias="createdAt")
    updated_at: datetime = Field(alias="updatedAt")
    __properties: ClassVar[List[str]] = ["id", "tenantId", "email", "firstName", "lastName", "status", "avatar", "timezone", "language", "department", "jobTitle", "manager", "lastLoginAt", "enrollmentCount", "completionCount", "totalLearningMinutes", "metadata", "createdAt", "updatedAt"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['active', 'inactive', 'pending', 'suspended']):
            raise ValueError("must be one of enum values ('active', 'inactive', 'pending', 'suspended')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Learner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Learner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "tenantId": obj.get("tenantId"),
            "email": obj.get("email"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "status": obj.get("status"),
            "avatar": obj.get("avatar"),
            "timezone": obj.get("timezone"),
            "language": obj.get("language"),
            "department": obj.get("department"),
            "jobTitle": obj.get("jobTitle"),
            "manager": obj.get("manager"),
            "lastLoginAt": obj.get("lastLoginAt"),
            "enrollmentCount": obj.get("enrollmentCount"),
            "completionCount": obj.get("completionCount"),
            "totalLearningMinutes": obj.get("totalLearningMinutes"),
            "metadata": obj.get("metadata"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj


