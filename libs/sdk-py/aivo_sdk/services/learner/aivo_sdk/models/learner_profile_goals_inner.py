"""
Learner Management API

Learner profile and learning data management service

The version of the OpenAPI document: 1.0.0
Contact: api-support@aivo.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import date
from typing import Annotated, Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator


class LearnerProfileGoalsInner(BaseModel):
    """
    LearnerProfileGoalsInner
    """  # noqa: E501

    goal_id: StrictStr | None = Field(default=None, alias="goalId")
    title: StrictStr | None = None
    description: StrictStr | None = None
    target_date: date | None = Field(default=None, alias="targetDate")
    status: StrictStr | None = None
    progress: (
        Annotated[float, Field(le=100, strict=True, ge=0)]
        | Annotated[int, Field(le=100, strict=True, ge=0)]
        | None
    ) = None
    __properties: ClassVar[list[str]] = [
        "goalId",
        "title",
        "description",
        "targetDate",
        "status",
        "progress",
    ]

    @field_validator("status")
    def status_validate_enum(self, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["active", "completed", "paused", "canceled"]):
            raise ValueError(
                "must be one of enum values ('active', 'completed', 'paused', 'canceled')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of LearnerProfileGoalsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of LearnerProfileGoalsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "goalId": obj.get("goalId"),
                "title": obj.get("title"),
                "description": obj.get("description"),
                "targetDate": obj.get("targetDate"),
                "status": obj.get("status"),
                "progress": obj.get("progress"),
            }
        )
        return _obj
