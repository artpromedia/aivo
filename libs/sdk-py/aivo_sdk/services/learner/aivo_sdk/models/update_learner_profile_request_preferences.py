# coding: utf-8

"""
    Learner Management API

    Learner profile and learning data management service

    The version of the OpenAPI document: 1.0.0
    Contact: api-support@aivo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateLearnerProfileRequestPreferences(BaseModel):
    """
    UpdateLearnerProfileRequestPreferences
    """ # noqa: E501
    learning_style: Optional[StrictStr] = Field(default=None, alias="learningStyle")
    difficulty_level: Optional[StrictStr] = Field(default=None, alias="difficultyLevel")
    notifications_enabled: Optional[StrictBool] = Field(default=None, alias="notificationsEnabled")
    email_digest: Optional[StrictBool] = Field(default=None, alias="emailDigest")
    preferred_learning_time: Optional[StrictStr] = Field(default=None, alias="preferredLearningTime")
    __properties: ClassVar[List[str]] = ["learningStyle", "difficultyLevel", "notificationsEnabled", "emailDigest", "preferredLearningTime"]

    @field_validator('learning_style')
    def learning_style_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['visual', 'auditory', 'kinesthetic', 'reading']):
            raise ValueError("must be one of enum values ('visual', 'auditory', 'kinesthetic', 'reading')")
        return value

    @field_validator('difficulty_level')
    def difficulty_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['beginner', 'intermediate', 'advanced']):
            raise ValueError("must be one of enum values ('beginner', 'intermediate', 'advanced')")
        return value

    @field_validator('preferred_learning_time')
    def preferred_learning_time_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['morning', 'afternoon', 'evening', 'night']):
            raise ValueError("must be one of enum values ('morning', 'afternoon', 'evening', 'night')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateLearnerProfileRequestPreferences from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateLearnerProfileRequestPreferences from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "learningStyle": obj.get("learningStyle"),
            "difficultyLevel": obj.get("difficultyLevel"),
            "notificationsEnabled": obj.get("notificationsEnabled"),
            "emailDigest": obj.get("emailDigest"),
            "preferredLearningTime": obj.get("preferredLearningTime")
        })
        return _obj


