# coding: utf-8

"""
    Learner Management API

    Learner profile and learning data management service

    The version of the OpenAPI document: 1.0.0
    Contact: api-support@aivo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from aivo_sdk.models.learner_analytics_activity_data_inner import LearnerAnalyticsActivityDataInner
from aivo_sdk.models.learner_analytics_subject_breakdown_inner import LearnerAnalyticsSubjectBreakdownInner
from typing import Optional, Set
from typing_extensions import Self

class LearnerAnalytics(BaseModel):
    """
    LearnerAnalytics
    """ # noqa: E501
    learner_id: StrictStr = Field(alias="learnerId")
    range: StrictStr
    total_learning_time: StrictInt = Field(description="Total learning time in minutes", alias="totalLearningTime")
    completion_rate: Union[Annotated[float, Field(le=100, strict=True, ge=0)], Annotated[int, Field(le=100, strict=True, ge=0)]] = Field(alias="completionRate")
    streak_days: StrictInt = Field(alias="streakDays")
    courses_started: Optional[StrictInt] = Field(default=None, alias="coursesStarted")
    courses_completed: Optional[StrictInt] = Field(default=None, alias="coursesCompleted")
    average_session_length: Optional[StrictInt] = Field(default=None, description="Average session length in minutes", alias="averageSessionLength")
    activity_data: List[LearnerAnalyticsActivityDataInner] = Field(alias="activityData")
    subject_breakdown: Optional[List[LearnerAnalyticsSubjectBreakdownInner]] = Field(default=None, alias="subjectBreakdown")
    __properties: ClassVar[List[str]] = ["learnerId", "range", "totalLearningTime", "completionRate", "streakDays", "coursesStarted", "coursesCompleted", "averageSessionLength", "activityData", "subjectBreakdown"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LearnerAnalytics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in activity_data (list)
        _items = []
        if self.activity_data:
            for _item_activity_data in self.activity_data:
                if _item_activity_data:
                    _items.append(_item_activity_data.to_dict())
            _dict['activityData'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subject_breakdown (list)
        _items = []
        if self.subject_breakdown:
            for _item_subject_breakdown in self.subject_breakdown:
                if _item_subject_breakdown:
                    _items.append(_item_subject_breakdown.to_dict())
            _dict['subjectBreakdown'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LearnerAnalytics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "learnerId": obj.get("learnerId"),
            "range": obj.get("range"),
            "totalLearningTime": obj.get("totalLearningTime"),
            "completionRate": obj.get("completionRate"),
            "streakDays": obj.get("streakDays"),
            "coursesStarted": obj.get("coursesStarted"),
            "coursesCompleted": obj.get("coursesCompleted"),
            "averageSessionLength": obj.get("averageSessionLength"),
            "activityData": [LearnerAnalyticsActivityDataInner.from_dict(_item) for _item in obj["activityData"]] if obj.get("activityData") is not None else None,
            "subjectBreakdown": [LearnerAnalyticsSubjectBreakdownInner.from_dict(_item) for _item in obj["subjectBreakdown"]] if obj.get("subjectBreakdown") is not None else None
        })
        return _obj


