"""
Tenant Management API

Multi-tenant organization management service

The version of the OpenAPI document: 1.0.0
Contact: api-support@aivo.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Annotated, Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator


class Tenant(BaseModel):
    """
    Tenant
    """  # noqa: E501

    id: StrictStr
    name: StrictStr
    slug: Annotated[str, Field(strict=True)]
    description: StrictStr | None = None
    logo: StrictStr | None = None
    website: StrictStr | None = None
    status: StrictStr
    plan: StrictStr
    max_users: Annotated[int, Field(strict=True, ge=1)] | None = Field(
        default=None, alias="maxUsers"
    )
    max_seats: Annotated[int, Field(strict=True, ge=1)] | None = Field(
        default=None, alias="maxSeats"
    )
    trial_ends_at: datetime | None = Field(default=None, alias="trialEndsAt")
    created_at: datetime = Field(alias="createdAt")
    updated_at: datetime = Field(alias="updatedAt")
    __properties: ClassVar[list[str]] = [
        "id",
        "name",
        "slug",
        "description",
        "logo",
        "website",
        "status",
        "plan",
        "maxUsers",
        "maxSeats",
        "trialEndsAt",
        "createdAt",
        "updatedAt",
    ]

    @field_validator("slug")
    def slug_validate_regular_expression(self, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z0-9-]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-z0-9-]+$/")
        return value

    @field_validator("status")
    def status_validate_enum(self, value):
        """Validates the enum"""
        if value not in set(["active", "inactive", "trial", "suspended"]):
            raise ValueError(
                "must be one of enum values ('active', 'inactive', 'trial', 'suspended')"
            )
        return value

    @field_validator("plan")
    def plan_validate_enum(self, value):
        """Validates the enum"""
        if value not in set(["free", "starter", "professional", "enterprise"]):
            raise ValueError(
                "must be one of enum values ('free', 'starter', 'professional', 'enterprise')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of Tenant from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of Tenant from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "name": obj.get("name"),
                "slug": obj.get("slug"),
                "description": obj.get("description"),
                "logo": obj.get("logo"),
                "website": obj.get("website"),
                "status": obj.get("status"),
                "plan": obj.get("plan"),
                "maxUsers": obj.get("maxUsers"),
                "maxSeats": obj.get("maxSeats"),
                "trialEndsAt": obj.get("trialEndsAt"),
                "createdAt": obj.get("createdAt"),
                "updatedAt": obj.get("updatedAt"),
            }
        )
        return _obj
