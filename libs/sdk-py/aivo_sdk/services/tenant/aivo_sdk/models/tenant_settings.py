"""
Tenant Management API

Multi-tenant organization management service

The version of the OpenAPI document: 1.0.0
Contact: api-support@aivo.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, Field, StrictStr

from aivo_sdk.models.tenant_settings_branding import TenantSettingsBranding
from aivo_sdk.models.tenant_settings_features import TenantSettingsFeatures
from aivo_sdk.models.tenant_settings_notifications import TenantSettingsNotifications


class TenantSettings(BaseModel):
    """
    TenantSettings
    """  # noqa: E501

    tenant_id: StrictStr = Field(alias="tenantId")
    features: TenantSettingsFeatures
    branding: TenantSettingsBranding
    notifications: TenantSettingsNotifications
    __properties: ClassVar[list[str]] = ["tenantId", "features", "branding", "notifications"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of TenantSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of features
        if self.features:
            _dict["features"] = self.features.to_dict()
        # override the default output from pydantic by calling `to_dict()` of branding
        if self.branding:
            _dict["branding"] = self.branding.to_dict()
        # override the default output from pydantic by calling `to_dict()` of notifications
        if self.notifications:
            _dict["notifications"] = self.notifications.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of TenantSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "tenantId": obj.get("tenantId"),
                "features": TenantSettingsFeatures.from_dict(obj["features"])
                if obj.get("features") is not None
                else None,
                "branding": TenantSettingsBranding.from_dict(obj["branding"])
                if obj.get("branding") is not None
                else None,
                "notifications": TenantSettingsNotifications.from_dict(obj["notifications"])
                if obj.get("notifications") is not None
                else None,
            }
        )
        return _obj
