"""
Tenant Management API

Multi-tenant organization management service

The version of the OpenAPI document: 1.0.0
Contact: api-support@aivo.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501
# ruff: noqa: N818

from typing import Any, Self


class OpenApiError(Exception):
    """Base exception class for all OpenAPI Errors."""


class ApiTypeError(OpenApiError, TypeError):
    """Exception raised for type-related API errors."""

    def __init__(self: Self, msg, path_to_item=None, valid_classes=None, key_type=None) -> None:
        """Raises an exception for TypeErrors

        Args:
            msg (str): the exception message

        Keyword Args:
            path_to_item (list): a list of keys an indices to get to the
                                 current_item
                                 None if unset
            valid_classes (tuple): the primitive classes that current item
                                   should be an instance of
                                   None if unset
            key_type (bool): False if our value is a value in a dict
                             True if it is a key in a dict
                             False if our item is an item in a list
                             None if unset
        """
        self.path_to_item = path_to_item
        self.valid_classes = valid_classes
        self.key_type = key_type
        full_msg = msg
        if path_to_item:
            full_msg = f"{msg} at {render_path(path_to_item)}"
        super().__init__(full_msg)


class ApiValueError(OpenApiError, ValueError):
    """Exception raised for value-related API errors."""

    def __init__(self: Self, msg, path_to_item=None) -> None:
        """
        Args:
            msg (str): the exception message

        Keyword Args:
            path_to_item (list) the path to the exception in the
                received_data dict. None if unset
        """

        self.path_to_item = path_to_item
        full_msg = msg
        if path_to_item:
            full_msg = f"{msg} at {render_path(path_to_item)}"
        super().__init__(full_msg)


class ApiAttributeError(OpenApiError, AttributeError):
    """Exception raised for attribute-related API errors."""

    def __init__(self: Self, msg, path_to_item=None) -> None:
        """
        Raised when an attribute reference or assignment fails.

        Args:
            msg (str): the exception message

        Keyword Args:
            path_to_item (None/list) the path to the exception in the
                received_data dict
        """
        self.path_to_item = path_to_item
        full_msg = msg
        if path_to_item:
            full_msg = f"{msg} at {render_path(path_to_item)}"
        super().__init__(full_msg)


class ApiKeyError(OpenApiError, KeyError):
    """Exception raised for key-related API errors."""

    def __init__(self: Self, msg, path_to_item=None) -> None:
        """
        Args:
            msg (str): the exception message

        Keyword Args:
            path_to_item (None/list) the path to the exception in the
                received_data dict
        """
        self.path_to_item = path_to_item
        full_msg = msg
        if path_to_item:
            full_msg = f"{msg} at {render_path(path_to_item)}"
        super().__init__(full_msg)


class ApiError(OpenApiError):
    """General API error exception."""

    def __init__(
        self: Self,
        status=None,
        reason=None,
        http_resp=None,
        *,
        body: str | None = None,
        data: Any | None = None,
    ) -> None:
        self.status = status
        self.reason = reason
        self.body = body
        self.data = data
        self.headers = None

        if http_resp:
            if self.status is None:
                self.status = http_resp.status
            if self.reason is None:
                self.reason = http_resp.reason
            if self.body is None:
                try:
                    self.body = http_resp.data.decode("utf-8")
                except (UnicodeDecodeError, AttributeError):
                    # pylint: disable=broad-exception-caught
                    pass
            self.headers = http_resp.getheaders()

    @classmethod
    def from_response(
        cls: type[Self],
        *,
        http_resp,
        body: str | None,
        data: Any | None,
    ) -> Self:
        """Create appropriate exception based on HTTP response status code."""
        if http_resp.status == 400:
            raise BadRequestException(http_resp=http_resp, body=body, data=data)

        if http_resp.status == 401:
            raise UnauthorizedException(http_resp=http_resp, body=body, data=data)

        if http_resp.status == 403:
            raise ForbiddenException(http_resp=http_resp, body=body, data=data)

        if http_resp.status == 404:
            raise NotFoundException(http_resp=http_resp, body=body, data=data)

        # Added new conditions for 409 and 422
        if http_resp.status == 409:
            raise ConflictException(http_resp=http_resp, body=body, data=data)

        if http_resp.status == 422:
            raise UnprocessableEntityException(http_resp=http_resp, body=body, data=data)

        if 500 <= http_resp.status <= 599:
            raise ServiceException(http_resp=http_resp, body=body, data=data)
        raise ApiError(http_resp=http_resp, body=body, data=data)

    def __str__(self: Self) -> str:
        """Custom error messages for exception"""
        error_message = f"({self.status})\nReason: {self.reason}\n"
        if self.headers:
            error_message += f"HTTP response headers: {self.headers}\n"

        if self.data or self.body:
            error_message += f"HTTP response body: {self.data or self.body}\n"

        return error_message


class BadRequestException(ApiError):
    """Exception for HTTP 400 Bad Request errors."""


class NotFoundException(ApiError):
    """Exception for HTTP 404 Not Found errors."""


class UnauthorizedException(ApiError):
    """Exception for HTTP 401 Unauthorized errors."""


class ForbiddenException(ApiError):
    """Exception for HTTP 403 Forbidden errors."""


class ServiceException(ApiError):
    """Exception for HTTP 5xx Server errors."""


class ConflictException(ApiError):
    """Exception for HTTP 409 Conflict."""


class UnprocessableEntityException(ApiError):
    """Exception for HTTP 422 Unprocessable Entity."""


def render_path(path_to_item):
    """Returns a string representation of a path"""
    result = ""
    for pth in path_to_item:
        if isinstance(pth, int):
            result += f"[{pth}]"
        else:
            result += f"['{pth}']"
    return result
