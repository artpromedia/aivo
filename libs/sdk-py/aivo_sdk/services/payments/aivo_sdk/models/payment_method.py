"""
Payments & Billing API

Subscription billing and payment processing service

The version of the OpenAPI document: 1.0.0
Contact: api-support@aivo.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator

from aivo_sdk.models.payment_method_bank_account import PaymentMethodBankAccount
from aivo_sdk.models.payment_method_card import PaymentMethodCard


class PaymentMethod(BaseModel):
    """
    PaymentMethod
    """  # noqa: E501

    id: StrictStr
    tenant_id: StrictStr = Field(alias="tenantId")
    type: StrictStr
    is_default: StrictBool = Field(alias="isDefault")
    card: PaymentMethodCard | None = None
    bank_account: PaymentMethodBankAccount | None = Field(default=None, alias="bankAccount")
    created_at: datetime = Field(alias="createdAt")
    __properties: ClassVar[list[str]] = [
        "id",
        "tenantId",
        "type",
        "isDefault",
        "card",
        "bankAccount",
        "createdAt",
    ]

    @field_validator("type")
    def type_validate_enum(self, value):
        """Validates the enum"""
        if value not in set(["card", "bank_account", "paypal"]):
            raise ValueError("must be one of enum values ('card', 'bank_account', 'paypal')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of PaymentMethod from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of card
        if self.card:
            _dict["card"] = self.card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bank_account
        if self.bank_account:
            _dict["bankAccount"] = self.bank_account.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of PaymentMethod from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "tenantId": obj.get("tenantId"),
                "type": obj.get("type"),
                "isDefault": obj.get("isDefault"),
                "card": PaymentMethodCard.from_dict(obj["card"])
                if obj.get("card") is not None
                else None,
                "bankAccount": PaymentMethodBankAccount.from_dict(obj["bankAccount"])
                if obj.get("bankAccount") is not None
                else None,
                "createdAt": obj.get("createdAt"),
            }
        )
        return _obj
