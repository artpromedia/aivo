"""
Payments & Billing API

Subscription billing and payment processing service

The version of the OpenAPI document: 1.0.0
Contact: api-support@aivo.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Annotated, Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, Field, StrictStr


class CreateSubscriptionRequest(BaseModel):
    """
    CreateSubscriptionRequest
    """  # noqa: E501

    tenant_id: StrictStr = Field(alias="tenantId")
    plan_id: StrictStr = Field(alias="planId")
    quantity: Annotated[int, Field(strict=True, ge=1)] | None = 1
    trial_period_days: Annotated[int, Field(strict=True, ge=0)] | None = Field(
        default=None, alias="trialPeriodDays"
    )
    coupon_code: StrictStr | None = Field(default=None, alias="couponCode")
    payment_method_id: StrictStr | None = Field(default=None, alias="paymentMethodId")
    metadata: dict[str, Any] | None = None
    __properties: ClassVar[list[str]] = [
        "tenantId",
        "planId",
        "quantity",
        "trialPeriodDays",
        "couponCode",
        "paymentMethodId",
        "metadata",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of CreateSubscriptionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of CreateSubscriptionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "tenantId": obj.get("tenantId"),
                "planId": obj.get("planId"),
                "quantity": obj.get("quantity") if obj.get("quantity") is not None else 1,
                "trialPeriodDays": obj.get("trialPeriodDays"),
                "couponCode": obj.get("couponCode"),
                "paymentMethodId": obj.get("paymentMethodId"),
                "metadata": obj.get("metadata"),
            }
        )
        return _obj
