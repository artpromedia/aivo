"""
Payments & Billing API

Subscription billing and payment processing service

The version of the OpenAPI document: 1.0.0
Contact: api-support@aivo.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator

from aivo_sdk.models.invoice_line_item import InvoiceLineItem


class Invoice(BaseModel):
    """
    Invoice
    """  # noqa: E501

    id: StrictStr
    subscription_id: StrictStr = Field(alias="subscriptionId")
    tenant_id: StrictStr = Field(alias="tenantId")
    invoice_number: StrictStr | None = Field(default=None, alias="invoiceNumber")
    status: StrictStr
    amount_due: StrictInt = Field(description="Amount in cents", alias="amountDue")
    amount_paid: StrictInt = Field(description="Amount in cents", alias="amountPaid")
    currency: StrictStr
    due_date: datetime = Field(alias="dueDate")
    paid_at: datetime | None = Field(default=None, alias="paidAt")
    period_start: datetime | None = Field(default=None, alias="periodStart")
    period_end: datetime | None = Field(default=None, alias="periodEnd")
    download_url: StrictStr | None = Field(default=None, alias="downloadUrl")
    line_items: list[InvoiceLineItem] | None = Field(default=None, alias="lineItems")
    created_at: datetime = Field(alias="createdAt")
    __properties: ClassVar[list[str]] = [
        "id",
        "subscriptionId",
        "tenantId",
        "invoiceNumber",
        "status",
        "amountDue",
        "amountPaid",
        "currency",
        "dueDate",
        "paidAt",
        "periodStart",
        "periodEnd",
        "downloadUrl",
        "lineItems",
        "createdAt",
    ]

    @field_validator("status")
    def status_validate_enum(self, value):
        """Validates the enum"""
        if value not in set(["draft", "open", "paid", "void", "uncollectible"]):
            raise ValueError(
                "must be one of enum values ('draft', 'open', 'paid', 'void', 'uncollectible')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of Invoice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in line_items (list)
        _items = []
        if self.line_items:
            for _item_line_items in self.line_items:
                if _item_line_items:
                    _items.append(_item_line_items.to_dict())
            _dict["lineItems"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of Invoice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "subscriptionId": obj.get("subscriptionId"),
                "tenantId": obj.get("tenantId"),
                "invoiceNumber": obj.get("invoiceNumber"),
                "status": obj.get("status"),
                "amountDue": obj.get("amountDue"),
                "amountPaid": obj.get("amountPaid"),
                "currency": obj.get("currency"),
                "dueDate": obj.get("dueDate"),
                "paidAt": obj.get("paidAt"),
                "periodStart": obj.get("periodStart"),
                "periodEnd": obj.get("periodEnd"),
                "downloadUrl": obj.get("downloadUrl"),
                "lineItems": [InvoiceLineItem.from_dict(_item) for _item in obj["lineItems"]]
                if obj.get("lineItems") is not None
                else None,
                "createdAt": obj.get("createdAt"),
            }
        )
        return _obj
