"""
Payments & Billing API

Subscription billing and payment processing service

The version of the OpenAPI document: 1.0.0
Contact: api-support@aivo.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Annotated, Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator

from aivo_sdk.models.discount import Discount


class Subscription(BaseModel):
    """
    Subscription
    """  # noqa: E501

    id: StrictStr
    tenant_id: StrictStr = Field(alias="tenantId")
    plan_id: StrictStr = Field(alias="planId")
    status: StrictStr
    quantity: Annotated[int, Field(strict=True, ge=1)] | None = None
    unit_amount: StrictInt | None = Field(
        default=None, description="Amount in cents", alias="unitAmount"
    )
    currency: StrictStr | None = None
    current_period_start: datetime = Field(alias="currentPeriodStart")
    current_period_end: datetime = Field(alias="currentPeriodEnd")
    trial_start: datetime | None = Field(default=None, alias="trialStart")
    trial_end: datetime | None = Field(default=None, alias="trialEnd")
    cancel_at_period_end: StrictBool | None = Field(default=False, alias="cancelAtPeriodEnd")
    canceled_at: datetime | None = Field(default=None, alias="canceledAt")
    discount: Discount | None = None
    metadata: dict[str, Any] | None = None
    created_at: datetime = Field(alias="createdAt")
    updated_at: datetime = Field(alias="updatedAt")
    __properties: ClassVar[list[str]] = [
        "id",
        "tenantId",
        "planId",
        "status",
        "quantity",
        "unitAmount",
        "currency",
        "currentPeriodStart",
        "currentPeriodEnd",
        "trialStart",
        "trialEnd",
        "cancelAtPeriodEnd",
        "canceledAt",
        "discount",
        "metadata",
        "createdAt",
        "updatedAt",
    ]

    @field_validator("status")
    def status_validate_enum(self, value):
        """Validates the enum"""
        if value not in set(["active", "inactive", "past_due", "canceled", "trialing"]):
            raise ValueError(
                "must be one of enum values ('active', 'inactive', 'past_due', 'canceled', 'trialing')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of Subscription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of discount
        if self.discount:
            _dict["discount"] = self.discount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of Subscription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "tenantId": obj.get("tenantId"),
                "planId": obj.get("planId"),
                "status": obj.get("status"),
                "quantity": obj.get("quantity"),
                "unitAmount": obj.get("unitAmount"),
                "currency": obj.get("currency"),
                "currentPeriodStart": obj.get("currentPeriodStart"),
                "currentPeriodEnd": obj.get("currentPeriodEnd"),
                "trialStart": obj.get("trialStart"),
                "trialEnd": obj.get("trialEnd"),
                "cancelAtPeriodEnd": obj.get("cancelAtPeriodEnd")
                if obj.get("cancelAtPeriodEnd") is not None
                else False,
                "canceledAt": obj.get("canceledAt"),
                "discount": Discount.from_dict(obj["discount"])
                if obj.get("discount") is not None
                else None,
                "metadata": obj.get("metadata"),
                "createdAt": obj.get("createdAt"),
                "updatedAt": obj.get("updatedAt"),
            }
        )
        return _obj
