"""
Payments & Billing API

Subscription billing and payment processing service

The version of the OpenAPI document: 1.0.0
Contact: api-support@aivo.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Annotated, Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator


class CreateCouponRequest(BaseModel):
    """
    CreateCouponRequest
    """  # noqa: E501

    code: Annotated[str, Field(min_length=3, strict=True, max_length=20)]
    name: StrictStr | None = None
    discount_type: StrictStr = Field(alias="discountType")
    discount_value: (
        Annotated[float, Field(strict=True, ge=0)] | Annotated[int, Field(strict=True, ge=0)]
    ) = Field(alias="discountValue")
    max_redemptions: Annotated[int, Field(strict=True, ge=1)] | None = Field(
        default=None, alias="maxRedemptions"
    )
    valid_from: datetime | None = Field(default=None, alias="validFrom")
    valid_until: datetime | None = Field(default=None, alias="validUntil")
    __properties: ClassVar[list[str]] = [
        "code",
        "name",
        "discountType",
        "discountValue",
        "maxRedemptions",
        "validFrom",
        "validUntil",
    ]

    @field_validator("code")
    def code_validate_regular_expression(self, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Z0-9_-]+$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z0-9_-]+$/")
        return value

    @field_validator("discount_type")
    def discount_type_validate_enum(self, value):
        """Validates the enum"""
        if value not in set(["percent", "amount"]):
            raise ValueError("must be one of enum values ('percent', 'amount')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of CreateCouponRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of CreateCouponRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "code": obj.get("code"),
                "name": obj.get("name"),
                "discountType": obj.get("discountType"),
                "discountValue": obj.get("discountValue"),
                "maxRedemptions": obj.get("maxRedemptions"),
                "validFrom": obj.get("validFrom"),
                "validUntil": obj.get("validUntil"),
            }
        )
        return _obj
