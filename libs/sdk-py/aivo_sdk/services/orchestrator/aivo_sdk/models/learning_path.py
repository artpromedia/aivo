"""
Learning Orchestrator API

Course orchestration and learning path management service

The version of the OpenAPI document: 1.0.0
Contact: api-support@aivo.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Annotated, Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator


class LearningPath(BaseModel):
    """
    LearningPath
    """  # noqa: E501

    id: StrictStr
    title: StrictStr
    description: StrictStr
    category: StrictStr
    status: StrictStr
    difficulty: StrictStr | None = None
    estimated_duration: StrictInt = Field(
        description="Total estimated duration in minutes", alias="estimatedDuration"
    )
    thumbnail_url: StrictStr | None = Field(default=None, alias="thumbnailUrl")
    course_count: StrictInt = Field(alias="courseCount")
    enrollment_count: StrictInt | None = Field(default=None, alias="enrollmentCount")
    average_rating: (
        Annotated[float, Field(le=5, strict=True, ge=0)]
        | Annotated[int, Field(le=5, strict=True, ge=0)]
        | None
    ) = Field(default=None, alias="averageRating")
    tags: list[StrictStr] | None = None
    created_at: datetime = Field(alias="createdAt")
    updated_at: datetime = Field(alias="updatedAt")
    __properties: ClassVar[list[str]] = [
        "id",
        "title",
        "description",
        "category",
        "status",
        "difficulty",
        "estimatedDuration",
        "thumbnailUrl",
        "courseCount",
        "enrollmentCount",
        "averageRating",
        "tags",
        "createdAt",
        "updatedAt",
    ]

    @field_validator("status")
    def status_validate_enum(self, value):
        """Validates the enum"""
        if value not in set(["draft", "published", "archived"]):
            raise ValueError("must be one of enum values ('draft', 'published', 'archived')")
        return value

    @field_validator("difficulty")
    def difficulty_validate_enum(self, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["beginner", "intermediate", "advanced"]):
            raise ValueError("must be one of enum values ('beginner', 'intermediate', 'advanced')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of LearningPath from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of LearningPath from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "title": obj.get("title"),
                "description": obj.get("description"),
                "category": obj.get("category"),
                "status": obj.get("status"),
                "difficulty": obj.get("difficulty"),
                "estimatedDuration": obj.get("estimatedDuration"),
                "thumbnailUrl": obj.get("thumbnailUrl"),
                "courseCount": obj.get("courseCount"),
                "enrollmentCount": obj.get("enrollmentCount"),
                "averageRating": obj.get("averageRating"),
                "tags": obj.get("tags"),
                "createdAt": obj.get("createdAt"),
                "updatedAt": obj.get("updatedAt"),
            }
        )
        return _obj
