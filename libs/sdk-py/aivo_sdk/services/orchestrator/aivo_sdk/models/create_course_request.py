# coding: utf-8

"""
    Learning Orchestrator API

    Course orchestration and learning path management service

    The version of the OpenAPI document: 1.0.0
    Contact: api-support@aivo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CreateCourseRequest(BaseModel):
    """
    CreateCourseRequest
    """ # noqa: E501
    title: Annotated[str, Field(min_length=3, strict=True, max_length=200)]
    description: Annotated[str, Field(min_length=10, strict=True, max_length=2000)]
    short_description: Optional[Annotated[str, Field(strict=True, max_length=500)]] = Field(default=None, alias="shortDescription")
    category: StrictStr
    tags: Optional[Annotated[List[StrictStr], Field(max_length=10)]] = None
    difficulty: StrictStr
    estimated_duration: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, alias="estimatedDuration")
    thumbnail_url: Optional[StrictStr] = Field(default=None, alias="thumbnailUrl")
    instructor_id: Optional[StrictStr] = Field(default=None, alias="instructorId")
    prerequisites: Optional[List[StrictStr]] = None
    learning_objectives: Optional[Annotated[List[StrictStr], Field(max_length=20)]] = Field(default=None, alias="learningObjectives")
    is_public: Optional[StrictBool] = Field(default=True, alias="isPublic")
    metadata: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["title", "description", "shortDescription", "category", "tags", "difficulty", "estimatedDuration", "thumbnailUrl", "instructorId", "prerequisites", "learningObjectives", "isPublic", "metadata"]

    @field_validator('difficulty')
    def difficulty_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['beginner', 'intermediate', 'advanced']):
            raise ValueError("must be one of enum values ('beginner', 'intermediate', 'advanced')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateCourseRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateCourseRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "description": obj.get("description"),
            "shortDescription": obj.get("shortDescription"),
            "category": obj.get("category"),
            "tags": obj.get("tags"),
            "difficulty": obj.get("difficulty"),
            "estimatedDuration": obj.get("estimatedDuration"),
            "thumbnailUrl": obj.get("thumbnailUrl"),
            "instructorId": obj.get("instructorId"),
            "prerequisites": obj.get("prerequisites"),
            "learningObjectives": obj.get("learningObjectives"),
            "isPublic": obj.get("isPublic") if obj.get("isPublic") is not None else True,
            "metadata": obj.get("metadata")
        })
        return _obj


