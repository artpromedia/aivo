# coding: utf-8

"""
    Learning Orchestrator API

    Course orchestration and learning path management service

    The version of the OpenAPI document: 1.0.0
    Contact: api-support@aivo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CreateModuleRequest(BaseModel):
    """
    CreateModuleRequest
    """ # noqa: E501
    title: Annotated[str, Field(min_length=3, strict=True, max_length=200)]
    description: Optional[Annotated[str, Field(strict=True, max_length=1000)]] = None
    type: StrictStr
    order: Annotated[int, Field(strict=True, ge=1)]
    estimated_duration: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, alias="estimatedDuration")
    content_url: Optional[StrictStr] = Field(default=None, alias="contentUrl")
    transcript_url: Optional[StrictStr] = Field(default=None, alias="transcriptUrl")
    is_optional: Optional[StrictBool] = Field(default=False, alias="isOptional")
    prerequisites: Optional[List[StrictStr]] = None
    metadata: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["title", "description", "type", "order", "estimatedDuration", "contentUrl", "transcriptUrl", "isOptional", "prerequisites", "metadata"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['video', 'text', 'interactive', 'assignment', 'quiz']):
            raise ValueError("must be one of enum values ('video', 'text', 'interactive', 'assignment', 'quiz')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateModuleRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateModuleRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "description": obj.get("description"),
            "type": obj.get("type"),
            "order": obj.get("order"),
            "estimatedDuration": obj.get("estimatedDuration"),
            "contentUrl": obj.get("contentUrl"),
            "transcriptUrl": obj.get("transcriptUrl"),
            "isOptional": obj.get("isOptional") if obj.get("isOptional") is not None else False,
            "prerequisites": obj.get("prerequisites"),
            "metadata": obj.get("metadata")
        })
        return _obj


