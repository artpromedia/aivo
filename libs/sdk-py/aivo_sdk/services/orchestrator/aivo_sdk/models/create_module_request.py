"""
Learning Orchestrator API

Course orchestration and learning path management service

The version of the OpenAPI document: 1.0.0
Contact: api-support@aivo.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Annotated, Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator


class CreateModuleRequest(BaseModel):
    """
    CreateModuleRequest
    """  # noqa: E501

    title: Annotated[str, Field(min_length=3, strict=True, max_length=200)]
    description: Annotated[str, Field(strict=True, max_length=1000)] | None = None
    type: StrictStr
    order: Annotated[int, Field(strict=True, ge=1)]
    estimated_duration: Annotated[int, Field(strict=True, ge=1)] | None = Field(
        default=None, alias="estimatedDuration"
    )
    content_url: StrictStr | None = Field(default=None, alias="contentUrl")
    transcript_url: StrictStr | None = Field(default=None, alias="transcriptUrl")
    is_optional: StrictBool | None = Field(default=False, alias="isOptional")
    prerequisites: list[StrictStr] | None = None
    metadata: dict[str, Any] | None = None
    __properties: ClassVar[list[str]] = [
        "title",
        "description",
        "type",
        "order",
        "estimatedDuration",
        "contentUrl",
        "transcriptUrl",
        "isOptional",
        "prerequisites",
        "metadata",
    ]

    @field_validator("type")
    def type_validate_enum(self, value):
        """Validates the enum"""
        if value not in set(["video", "text", "interactive", "assignment", "quiz"]):
            raise ValueError(
                "must be one of enum values ('video', 'text', 'interactive', 'assignment', 'quiz')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of CreateModuleRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of CreateModuleRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "title": obj.get("title"),
                "description": obj.get("description"),
                "type": obj.get("type"),
                "order": obj.get("order"),
                "estimatedDuration": obj.get("estimatedDuration"),
                "contentUrl": obj.get("contentUrl"),
                "transcriptUrl": obj.get("transcriptUrl"),
                "isOptional": obj.get("isOptional") if obj.get("isOptional") is not None else False,
                "prerequisites": obj.get("prerequisites"),
                "metadata": obj.get("metadata"),
            }
        )
        return _obj
