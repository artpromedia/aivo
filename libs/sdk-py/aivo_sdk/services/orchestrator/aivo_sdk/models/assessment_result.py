"""
Learning Orchestrator API

Course orchestration and learning path management service

The version of the OpenAPI document: 1.0.0
Contact: api-support@aivo.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Annotated, Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr

from aivo_sdk.models.assessment_result_detailed_results_inner import (
    AssessmentResultDetailedResultsInner,
)


class AssessmentResult(BaseModel):
    """
    AssessmentResult
    """  # noqa: E501

    id: StrictStr
    assessment_id: StrictStr = Field(alias="assessmentId")
    learner_id: StrictStr = Field(alias="learnerId")
    score: StrictFloat | StrictInt
    max_score: StrictFloat | StrictInt = Field(alias="maxScore")
    percentage: (
        Annotated[float, Field(le=100, strict=True, ge=0)]
        | Annotated[int, Field(le=100, strict=True, ge=0)]
        | None
    ) = None
    passed: StrictBool
    time_spent: StrictInt | None = Field(
        default=None, description="Time spent in minutes", alias="timeSpent"
    )
    attempt: StrictInt | None = None
    feedback: StrictStr | None = None
    detailed_results: list[AssessmentResultDetailedResultsInner] | None = Field(
        default=None, alias="detailedResults"
    )
    submitted_at: datetime = Field(alias="submittedAt")
    __properties: ClassVar[list[str]] = [
        "id",
        "assessmentId",
        "learnerId",
        "score",
        "maxScore",
        "percentage",
        "passed",
        "timeSpent",
        "attempt",
        "feedback",
        "detailedResults",
        "submittedAt",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of AssessmentResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in detailed_results (list)
        _items = []
        if self.detailed_results:
            for _item_detailed_results in self.detailed_results:
                if _item_detailed_results:
                    _items.append(_item_detailed_results.to_dict())
            _dict["detailedResults"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of AssessmentResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "assessmentId": obj.get("assessmentId"),
                "learnerId": obj.get("learnerId"),
                "score": obj.get("score"),
                "maxScore": obj.get("maxScore"),
                "percentage": obj.get("percentage"),
                "passed": obj.get("passed"),
                "timeSpent": obj.get("timeSpent"),
                "attempt": obj.get("attempt"),
                "feedback": obj.get("feedback"),
                "detailedResults": [
                    AssessmentResultDetailedResultsInner.from_dict(_item)
                    for _item in obj["detailedResults"]
                ]
                if obj.get("detailedResults") is not None
                else None,
                "submittedAt": obj.get("submittedAt"),
            }
        )
        return _obj
