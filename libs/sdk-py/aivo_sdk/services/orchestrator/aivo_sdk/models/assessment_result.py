# coding: utf-8

"""
    Learning Orchestrator API

    Course orchestration and learning path management service

    The version of the OpenAPI document: 1.0.0
    Contact: api-support@aivo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from aivo_sdk.models.assessment_result_detailed_results_inner import AssessmentResultDetailedResultsInner
from typing import Optional, Set
from typing_extensions import Self

class AssessmentResult(BaseModel):
    """
    AssessmentResult
    """ # noqa: E501
    id: StrictStr
    assessment_id: StrictStr = Field(alias="assessmentId")
    learner_id: StrictStr = Field(alias="learnerId")
    score: Union[StrictFloat, StrictInt]
    max_score: Union[StrictFloat, StrictInt] = Field(alias="maxScore")
    percentage: Optional[Union[Annotated[float, Field(le=100, strict=True, ge=0)], Annotated[int, Field(le=100, strict=True, ge=0)]]] = None
    passed: StrictBool
    time_spent: Optional[StrictInt] = Field(default=None, description="Time spent in minutes", alias="timeSpent")
    attempt: Optional[StrictInt] = None
    feedback: Optional[StrictStr] = None
    detailed_results: Optional[List[AssessmentResultDetailedResultsInner]] = Field(default=None, alias="detailedResults")
    submitted_at: datetime = Field(alias="submittedAt")
    __properties: ClassVar[List[str]] = ["id", "assessmentId", "learnerId", "score", "maxScore", "percentage", "passed", "timeSpent", "attempt", "feedback", "detailedResults", "submittedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssessmentResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in detailed_results (list)
        _items = []
        if self.detailed_results:
            for _item_detailed_results in self.detailed_results:
                if _item_detailed_results:
                    _items.append(_item_detailed_results.to_dict())
            _dict['detailedResults'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssessmentResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "assessmentId": obj.get("assessmentId"),
            "learnerId": obj.get("learnerId"),
            "score": obj.get("score"),
            "maxScore": obj.get("maxScore"),
            "percentage": obj.get("percentage"),
            "passed": obj.get("passed"),
            "timeSpent": obj.get("timeSpent"),
            "attempt": obj.get("attempt"),
            "feedback": obj.get("feedback"),
            "detailedResults": [AssessmentResultDetailedResultsInner.from_dict(_item) for _item in obj["detailedResults"]] if obj.get("detailedResults") is not None else None,
            "submittedAt": obj.get("submittedAt")
        })
        return _obj


