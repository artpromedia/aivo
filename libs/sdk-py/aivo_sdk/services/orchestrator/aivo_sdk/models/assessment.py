"""
Learning Orchestrator API

Course orchestration and learning path management service

The version of the OpenAPI document: 1.0.0
Contact: api-support@aivo.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Annotated, Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator


class Assessment(BaseModel):
    """
    Assessment
    """  # noqa: E501

    id: StrictStr
    title: StrictStr
    description: StrictStr | None = None
    type: StrictStr
    course_id: StrictStr = Field(alias="courseId")
    module_id: StrictStr | None = Field(default=None, alias="moduleId")
    max_score: (
        Annotated[float, Field(strict=True, ge=0)] | Annotated[int, Field(strict=True, ge=0)]
    ) = Field(alias="maxScore")
    passing_score: (
        Annotated[float, Field(strict=True, ge=0)] | Annotated[int, Field(strict=True, ge=0)]
    ) = Field(alias="passingScore")
    time_limit: StrictInt = Field(description="Time limit in minutes", alias="timeLimit")
    attempts_allowed: Annotated[int, Field(strict=True, ge=1)] | None = Field(
        default=None, alias="attemptsAllowed"
    )
    question_count: StrictInt | None = Field(default=None, alias="questionCount")
    is_required: StrictBool | None = Field(default=True, alias="isRequired")
    metadata: dict[str, Any] | None = None
    created_at: datetime = Field(alias="createdAt")
    updated_at: datetime = Field(alias="updatedAt")
    __properties: ClassVar[list[str]] = [
        "id",
        "title",
        "description",
        "type",
        "courseId",
        "moduleId",
        "maxScore",
        "passingScore",
        "timeLimit",
        "attemptsAllowed",
        "questionCount",
        "isRequired",
        "metadata",
        "createdAt",
        "updatedAt",
    ]

    @field_validator("type")
    def type_validate_enum(self, value):
        """Validates the enum"""
        if value not in set(["quiz", "assignment", "final_exam", "certification"]):
            raise ValueError(
                "must be one of enum values ('quiz', 'assignment', 'final_exam', 'certification')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of Assessment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of Assessment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "title": obj.get("title"),
                "description": obj.get("description"),
                "type": obj.get("type"),
                "courseId": obj.get("courseId"),
                "moduleId": obj.get("moduleId"),
                "maxScore": obj.get("maxScore"),
                "passingScore": obj.get("passingScore"),
                "timeLimit": obj.get("timeLimit"),
                "attemptsAllowed": obj.get("attemptsAllowed"),
                "questionCount": obj.get("questionCount"),
                "isRequired": obj.get("isRequired") if obj.get("isRequired") is not None else True,
                "metadata": obj.get("metadata"),
                "createdAt": obj.get("createdAt"),
                "updatedAt": obj.get("updatedAt"),
            }
        )
        return _obj
