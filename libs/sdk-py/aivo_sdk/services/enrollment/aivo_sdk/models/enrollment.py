"""
Enrollment Management API

Learner enrollment and course assignment service

The version of the OpenAPI document: 1.0.0
Contact: api-support@aivo.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator


class Enrollment(BaseModel):
    """
    Enrollment
    """  # noqa: E501

    id: StrictStr
    tenant_id: StrictStr = Field(alias="tenantId")
    learner_id: StrictStr = Field(alias="learnerId")
    course_id: StrictStr = Field(alias="courseId")
    status: StrictStr
    enrolled_at: datetime = Field(alias="enrolledAt")
    started_at: datetime | None = Field(default=None, alias="startedAt")
    completed_at: datetime | None = Field(default=None, alias="completedAt")
    expires_at: datetime | None = Field(default=None, alias="expiresAt")
    enrolled_by: StrictStr | None = Field(default=None, alias="enrolledBy")
    metadata: dict[str, Any] | None = None
    created_at: datetime = Field(alias="createdAt")
    updated_at: datetime = Field(alias="updatedAt")
    __properties: ClassVar[list[str]] = [
        "id",
        "tenantId",
        "learnerId",
        "courseId",
        "status",
        "enrolledAt",
        "startedAt",
        "completedAt",
        "expiresAt",
        "enrolledBy",
        "metadata",
        "createdAt",
        "updatedAt",
    ]

    @field_validator("status")
    def status_validate_enum(self, value):
        """Validates the enum"""
        if value not in set(["enrolled", "in_progress", "completed", "dropped", "expired"]):
            raise ValueError(
                "must be one of enum values ('enrolled', 'in_progress', 'completed', 'dropped', 'expired')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of Enrollment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of Enrollment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "tenantId": obj.get("tenantId"),
                "learnerId": obj.get("learnerId"),
                "courseId": obj.get("courseId"),
                "status": obj.get("status"),
                "enrolledAt": obj.get("enrolledAt"),
                "startedAt": obj.get("startedAt"),
                "completedAt": obj.get("completedAt"),
                "expiresAt": obj.get("expiresAt"),
                "enrolledBy": obj.get("enrolledBy"),
                "metadata": obj.get("metadata"),
                "createdAt": obj.get("createdAt"),
                "updatedAt": obj.get("updatedAt"),
            }
        )
        return _obj
