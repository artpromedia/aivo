"""
Enrollment Management API

Learner enrollment and course assignment service

The version of the OpenAPI document: 1.0.0
Contact: api-support@aivo.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Annotated, Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, Field, StrictStr


class EnrollmentProgressAssessmentScoresInner(BaseModel):
    """
    EnrollmentProgressAssessmentScoresInner
    """  # noqa: E501

    assessment_id: StrictStr | None = Field(default=None, alias="assessmentId")
    score: (
        Annotated[float, Field(le=100, strict=True, ge=0)]
        | Annotated[int, Field(le=100, strict=True, ge=0)]
        | None
    ) = None
    completed_at: datetime | None = Field(default=None, alias="completedAt")
    __properties: ClassVar[list[str]] = ["assessmentId", "score", "completedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of EnrollmentProgressAssessmentScoresInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of EnrollmentProgressAssessmentScoresInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "assessmentId": obj.get("assessmentId"),
                "score": obj.get("score"),
                "completedAt": obj.get("completedAt"),
            }
        )
        return _obj
