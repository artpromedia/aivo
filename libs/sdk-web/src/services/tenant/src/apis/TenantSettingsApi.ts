/* tslint:disable */
/* eslint-disable */
/**
 * Tenant Management API
 * Multi-tenant organization management service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@aivo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TenantSettings,
} from '../models/index';
import {
    TenantSettingsFromJSON,
    TenantSettingsToJSON,
} from '../models/index';

export interface GetTenantSettingsRequest {
    tenantId: string;
}

export interface UpdateTenantSettingsRequest {
    tenantId: string;
    tenantSettings: TenantSettings;
}

/**
 * 
 */
export class TenantSettingsApi extends runtime.BaseAPI {

    /**
     * Get tenant settings
     */
    async getTenantSettingsRaw(requestParameters: GetTenantSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantSettings>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getTenantSettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/tenants/{tenantId}/settings`;
        urlPath = urlPath.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters['tenantId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantSettingsFromJSON(jsonValue));
    }

    /**
     * Get tenant settings
     */
    async getTenantSettings(requestParameters: GetTenantSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantSettings> {
        const response = await this.getTenantSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update tenant settings
     */
    async updateTenantSettingsRaw(requestParameters: UpdateTenantSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TenantSettings>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling updateTenantSettings().'
            );
        }

        if (requestParameters['tenantSettings'] == null) {
            throw new runtime.RequiredError(
                'tenantSettings',
                'Required parameter "tenantSettings" was null or undefined when calling updateTenantSettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/tenants/{tenantId}/settings`;
        urlPath = urlPath.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters['tenantId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TenantSettingsToJSON(requestParameters['tenantSettings']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantSettingsFromJSON(jsonValue));
    }

    /**
     * Update tenant settings
     */
    async updateTenantSettings(requestParameters: UpdateTenantSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TenantSettings> {
        const response = await this.updateTenantSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
