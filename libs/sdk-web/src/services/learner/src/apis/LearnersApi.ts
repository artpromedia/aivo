/* tslint:disable */
/* eslint-disable */
/**
 * Learner Management API
 * Learner profile and learning data management service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@aivo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateLearnerRequest,
  Learner,
  ListLearners200Response,
  UpdateLearnerRequest,
  ValidationError,
} from '../models/index';
import {
    CreateLearnerRequestFromJSON,
    CreateLearnerRequestToJSON,
    LearnerFromJSON,
    LearnerToJSON,
    ListLearners200ResponseFromJSON,
    ListLearners200ResponseToJSON,
    UpdateLearnerRequestFromJSON,
    UpdateLearnerRequestToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface CreateLearnerOperationRequest {
    createLearnerRequest: CreateLearnerRequest;
}

export interface DeleteLearnerRequest {
    learnerId: string;
}

export interface GetLearnerRequest {
    learnerId: string;
}

export interface ListLearnersRequest {
    tenantId: string;
    status?: ListLearnersStatusEnum;
    search?: string;
    limit?: number;
    offset?: number;
}

export interface UpdateLearnerOperationRequest {
    learnerId: string;
    updateLearnerRequest: UpdateLearnerRequest;
}

/**
 * 
 */
export class LearnersApi extends runtime.BaseAPI {

    /**
     * Create new learner
     */
    async createLearnerRaw(requestParameters: CreateLearnerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Learner>> {
        if (requestParameters['createLearnerRequest'] == null) {
            throw new runtime.RequiredError(
                'createLearnerRequest',
                'Required parameter "createLearnerRequest" was null or undefined when calling createLearner().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/learners`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLearnerRequestToJSON(requestParameters['createLearnerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LearnerFromJSON(jsonValue));
    }

    /**
     * Create new learner
     */
    async createLearner(requestParameters: CreateLearnerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Learner> {
        const response = await this.createLearnerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete learner
     */
    async deleteLearnerRaw(requestParameters: DeleteLearnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['learnerId'] == null) {
            throw new runtime.RequiredError(
                'learnerId',
                'Required parameter "learnerId" was null or undefined when calling deleteLearner().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/learners/{learnerId}`;
        urlPath = urlPath.replace(`{${"learnerId"}}`, encodeURIComponent(String(requestParameters['learnerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete learner
     */
    async deleteLearner(requestParameters: DeleteLearnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteLearnerRaw(requestParameters, initOverrides);
    }

    /**
     * Get learner by ID
     */
    async getLearnerRaw(requestParameters: GetLearnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Learner>> {
        if (requestParameters['learnerId'] == null) {
            throw new runtime.RequiredError(
                'learnerId',
                'Required parameter "learnerId" was null or undefined when calling getLearner().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/learners/{learnerId}`;
        urlPath = urlPath.replace(`{${"learnerId"}}`, encodeURIComponent(String(requestParameters['learnerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LearnerFromJSON(jsonValue));
    }

    /**
     * Get learner by ID
     */
    async getLearner(requestParameters: GetLearnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Learner> {
        const response = await this.getLearnerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List learners
     */
    async listLearnersRaw(requestParameters: ListLearnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListLearners200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling listLearners().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/learners`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListLearners200ResponseFromJSON(jsonValue));
    }

    /**
     * List learners
     */
    async listLearners(requestParameters: ListLearnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListLearners200Response> {
        const response = await this.listLearnersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update learner
     */
    async updateLearnerRaw(requestParameters: UpdateLearnerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Learner>> {
        if (requestParameters['learnerId'] == null) {
            throw new runtime.RequiredError(
                'learnerId',
                'Required parameter "learnerId" was null or undefined when calling updateLearner().'
            );
        }

        if (requestParameters['updateLearnerRequest'] == null) {
            throw new runtime.RequiredError(
                'updateLearnerRequest',
                'Required parameter "updateLearnerRequest" was null or undefined when calling updateLearner().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/learners/{learnerId}`;
        urlPath = urlPath.replace(`{${"learnerId"}}`, encodeURIComponent(String(requestParameters['learnerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateLearnerRequestToJSON(requestParameters['updateLearnerRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LearnerFromJSON(jsonValue));
    }

    /**
     * Update learner
     */
    async updateLearner(requestParameters: UpdateLearnerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Learner> {
        const response = await this.updateLearnerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ListLearnersStatusEnum = {
    Active: 'active',
    Inactive: 'inactive',
    Pending: 'pending',
    Suspended: 'suspended'
} as const;
export type ListLearnersStatusEnum = typeof ListLearnersStatusEnum[keyof typeof ListLearnersStatusEnum];
