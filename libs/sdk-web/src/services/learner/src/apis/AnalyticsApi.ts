/* tslint:disable */
/* eslint-disable */
/**
 * Learner Management API
 * Learner profile and learning data management service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@aivo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LearnerAnalytics,
} from '../models/index';
import {
    LearnerAnalyticsFromJSON,
    LearnerAnalyticsToJSON,
} from '../models/index';

export interface GetLearnerAnalyticsRequest {
    learnerId: string;
    range?: GetLearnerAnalyticsRangeEnum;
}

/**
 * 
 */
export class AnalyticsApi extends runtime.BaseAPI {

    /**
     * Get learner analytics
     */
    async getLearnerAnalyticsRaw(requestParameters: GetLearnerAnalyticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LearnerAnalytics>> {
        if (requestParameters['learnerId'] == null) {
            throw new runtime.RequiredError(
                'learnerId',
                'Required parameter "learnerId" was null or undefined when calling getLearnerAnalytics().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['range'] != null) {
            queryParameters['range'] = requestParameters['range'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/learners/{learnerId}/analytics`;
        urlPath = urlPath.replace(`{${"learnerId"}}`, encodeURIComponent(String(requestParameters['learnerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LearnerAnalyticsFromJSON(jsonValue));
    }

    /**
     * Get learner analytics
     */
    async getLearnerAnalytics(requestParameters: GetLearnerAnalyticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LearnerAnalytics> {
        const response = await this.getLearnerAnalyticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetLearnerAnalyticsRangeEnum = {
    _7d: '7d',
    _30d: '30d',
    _90d: '90d',
    _1y: '1y'
} as const;
export type GetLearnerAnalyticsRangeEnum = typeof GetLearnerAnalyticsRangeEnum[keyof typeof GetLearnerAnalyticsRangeEnum];
