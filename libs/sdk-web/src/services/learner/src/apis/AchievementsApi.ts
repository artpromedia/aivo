/* tslint:disable */
/* eslint-disable */
/**
 * Learner Management API
 * Learner profile and learning data management service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@aivo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Achievement,
  AwardAchievementRequest,
} from '../models/index';
import {
    AchievementFromJSON,
    AchievementToJSON,
    AwardAchievementRequestFromJSON,
    AwardAchievementRequestToJSON,
} from '../models/index';

export interface AwardAchievementOperationRequest {
    learnerId: string;
    awardAchievementRequest: AwardAchievementRequest;
}

export interface GetLearnerAchievementsRequest {
    learnerId: string;
}

/**
 * 
 */
export class AchievementsApi extends runtime.BaseAPI {

    /**
     * Award achievement to learner
     */
    async awardAchievementRaw(requestParameters: AwardAchievementOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Achievement>> {
        if (requestParameters['learnerId'] == null) {
            throw new runtime.RequiredError(
                'learnerId',
                'Required parameter "learnerId" was null or undefined when calling awardAchievement().'
            );
        }

        if (requestParameters['awardAchievementRequest'] == null) {
            throw new runtime.RequiredError(
                'awardAchievementRequest',
                'Required parameter "awardAchievementRequest" was null or undefined when calling awardAchievement().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/learners/{learnerId}/achievements`;
        urlPath = urlPath.replace(`{${"learnerId"}}`, encodeURIComponent(String(requestParameters['learnerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwardAchievementRequestToJSON(requestParameters['awardAchievementRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AchievementFromJSON(jsonValue));
    }

    /**
     * Award achievement to learner
     */
    async awardAchievement(requestParameters: AwardAchievementOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Achievement> {
        const response = await this.awardAchievementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get learner achievements
     */
    async getLearnerAchievementsRaw(requestParameters: GetLearnerAchievementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Achievement>>> {
        if (requestParameters['learnerId'] == null) {
            throw new runtime.RequiredError(
                'learnerId',
                'Required parameter "learnerId" was null or undefined when calling getLearnerAchievements().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/learners/{learnerId}/achievements`;
        urlPath = urlPath.replace(`{${"learnerId"}}`, encodeURIComponent(String(requestParameters['learnerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AchievementFromJSON));
    }

    /**
     * Get learner achievements
     */
    async getLearnerAchievements(requestParameters: GetLearnerAchievementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Achievement>> {
        const response = await this.getLearnerAchievementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
