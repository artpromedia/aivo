/* tslint:disable */
/* eslint-disable */
/**
 * Learner Management API
 * Learner profile and learning data management service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@aivo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AwardAchievementRequest
 */
export interface AwardAchievementRequest {
    /**
     * 
     * @type {string}
     * @memberof AwardAchievementRequest
     */
    type: AwardAchievementRequestTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AwardAchievementRequest
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof AwardAchievementRequest
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof AwardAchievementRequest
     */
    iconUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof AwardAchievementRequest
     */
    badgeUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof AwardAchievementRequest
     */
    points?: number;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof AwardAchievementRequest
     */
    metadata?: { [key: string]: any; };
}


/**
 * @export
 */
export const AwardAchievementRequestTypeEnum = {
    CourseCompletion: 'course_completion',
    Streak: 'streak',
    SkillMastery: 'skill_mastery',
    Certification: 'certification',
    Milestone: 'milestone'
} as const;
export type AwardAchievementRequestTypeEnum = typeof AwardAchievementRequestTypeEnum[keyof typeof AwardAchievementRequestTypeEnum];


/**
 * Check if a given object implements the AwardAchievementRequest interface.
 */
export function instanceOfAwardAchievementRequest(value: object): value is AwardAchievementRequest {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    return true;
}

export function AwardAchievementRequestFromJSON(json: any): AwardAchievementRequest {
    return AwardAchievementRequestFromJSONTyped(json, false);
}

export function AwardAchievementRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AwardAchievementRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'title': json['title'],
        'description': json['description'],
        'iconUrl': json['iconUrl'] == null ? undefined : json['iconUrl'],
        'badgeUrl': json['badgeUrl'] == null ? undefined : json['badgeUrl'],
        'points': json['points'] == null ? undefined : json['points'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
    };
}

export function AwardAchievementRequestToJSON(json: any): AwardAchievementRequest {
    return AwardAchievementRequestToJSONTyped(json, false);
}

export function AwardAchievementRequestToJSONTyped(value?: AwardAchievementRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'title': value['title'],
        'description': value['description'],
        'iconUrl': value['iconUrl'],
        'badgeUrl': value['badgeUrl'],
        'points': value['points'],
        'metadata': value['metadata'],
    };
}

