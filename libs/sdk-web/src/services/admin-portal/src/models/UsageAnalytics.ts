/* tslint:disable */
/* eslint-disable */
/**
 * Admin Portal Aggregator API
 * Read-only aggregator API for admin dashboard widgets and KPIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@aivo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UsageAnalyticsEngagement } from './UsageAnalyticsEngagement';
import {
    UsageAnalyticsEngagementFromJSON,
    UsageAnalyticsEngagementFromJSONTyped,
    UsageAnalyticsEngagementToJSON,
    UsageAnalyticsEngagementToJSONTyped,
} from './UsageAnalyticsEngagement';
import type { UsageAnalyticsTrends } from './UsageAnalyticsTrends';
import {
    UsageAnalyticsTrendsFromJSON,
    UsageAnalyticsTrendsFromJSONTyped,
    UsageAnalyticsTrendsToJSON,
    UsageAnalyticsTrendsToJSONTyped,
} from './UsageAnalyticsTrends';
import type { UsageAnalyticsActiveLearners } from './UsageAnalyticsActiveLearners';
import {
    UsageAnalyticsActiveLearnersFromJSON,
    UsageAnalyticsActiveLearnersFromJSONTyped,
    UsageAnalyticsActiveLearnersToJSON,
    UsageAnalyticsActiveLearnersToJSONTyped,
} from './UsageAnalyticsActiveLearners';
import type { UsageAnalyticsCompletionStats } from './UsageAnalyticsCompletionStats';
import {
    UsageAnalyticsCompletionStatsFromJSON,
    UsageAnalyticsCompletionStatsFromJSONTyped,
    UsageAnalyticsCompletionStatsToJSON,
    UsageAnalyticsCompletionStatsToJSONTyped,
} from './UsageAnalyticsCompletionStats';
import type { UsageAnalyticsSubjectMixInner } from './UsageAnalyticsSubjectMixInner';
import {
    UsageAnalyticsSubjectMixInnerFromJSON,
    UsageAnalyticsSubjectMixInnerFromJSONTyped,
    UsageAnalyticsSubjectMixInnerToJSON,
    UsageAnalyticsSubjectMixInnerToJSONTyped,
} from './UsageAnalyticsSubjectMixInner';

/**
 * 
 * @export
 * @interface UsageAnalytics
 */
export interface UsageAnalytics {
    /**
     * 
     * @type {string}
     * @memberof UsageAnalytics
     */
    tenantId: string;
    /**
     * Time range for this analytics data
     * @type {string}
     * @memberof UsageAnalytics
     */
    range: UsageAnalyticsRangeEnum;
    /**
     * Total learning minutes in the specified range
     * @type {number}
     * @memberof UsageAnalytics
     */
    totalMinutesLearned: number;
    /**
     * 
     * @type {UsageAnalyticsActiveLearners}
     * @memberof UsageAnalytics
     */
    activeLearners: UsageAnalyticsActiveLearners;
    /**
     * Average learning session length in minutes
     * @type {number}
     * @memberof UsageAnalytics
     */
    averageSessionLength?: number;
    /**
     * 
     * @type {UsageAnalyticsCompletionStats}
     * @memberof UsageAnalytics
     */
    completionStats?: UsageAnalyticsCompletionStats;
    /**
     * Breakdown of learning time by subject
     * @type {Array<UsageAnalyticsSubjectMixInner>}
     * @memberof UsageAnalytics
     */
    subjectMix: Array<UsageAnalyticsSubjectMixInner>;
    /**
     * 
     * @type {UsageAnalyticsTrends}
     * @memberof UsageAnalytics
     */
    trends: UsageAnalyticsTrends;
    /**
     * 
     * @type {UsageAnalyticsEngagement}
     * @memberof UsageAnalytics
     */
    engagement?: UsageAnalyticsEngagement;
    /**
     * 
     * @type {Date}
     * @memberof UsageAnalytics
     */
    lastUpdated: Date;
}


/**
 * @export
 */
export const UsageAnalyticsRangeEnum = {
    _7d: '7d',
    _30d: '30d',
    _90d: '90d',
    _1y: '1y'
} as const;
export type UsageAnalyticsRangeEnum = typeof UsageAnalyticsRangeEnum[keyof typeof UsageAnalyticsRangeEnum];


/**
 * Check if a given object implements the UsageAnalytics interface.
 */
export function instanceOfUsageAnalytics(value: object): value is UsageAnalytics {
    if (!('tenantId' in value) || value['tenantId'] === undefined) return false;
    if (!('range' in value) || value['range'] === undefined) return false;
    if (!('totalMinutesLearned' in value) || value['totalMinutesLearned'] === undefined) return false;
    if (!('activeLearners' in value) || value['activeLearners'] === undefined) return false;
    if (!('subjectMix' in value) || value['subjectMix'] === undefined) return false;
    if (!('trends' in value) || value['trends'] === undefined) return false;
    if (!('lastUpdated' in value) || value['lastUpdated'] === undefined) return false;
    return true;
}

export function UsageAnalyticsFromJSON(json: any): UsageAnalytics {
    return UsageAnalyticsFromJSONTyped(json, false);
}

export function UsageAnalyticsFromJSONTyped(json: any, ignoreDiscriminator: boolean): UsageAnalytics {
    if (json == null) {
        return json;
    }
    return {
        
        'tenantId': json['tenantId'],
        'range': json['range'],
        'totalMinutesLearned': json['totalMinutesLearned'],
        'activeLearners': UsageAnalyticsActiveLearnersFromJSON(json['activeLearners']),
        'averageSessionLength': json['averageSessionLength'] == null ? undefined : json['averageSessionLength'],
        'completionStats': json['completionStats'] == null ? undefined : UsageAnalyticsCompletionStatsFromJSON(json['completionStats']),
        'subjectMix': ((json['subjectMix'] as Array<any>).map(UsageAnalyticsSubjectMixInnerFromJSON)),
        'trends': UsageAnalyticsTrendsFromJSON(json['trends']),
        'engagement': json['engagement'] == null ? undefined : UsageAnalyticsEngagementFromJSON(json['engagement']),
        'lastUpdated': (new Date(json['lastUpdated'])),
    };
}

export function UsageAnalyticsToJSON(json: any): UsageAnalytics {
    return UsageAnalyticsToJSONTyped(json, false);
}

export function UsageAnalyticsToJSONTyped(value?: UsageAnalytics | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'tenantId': value['tenantId'],
        'range': value['range'],
        'totalMinutesLearned': value['totalMinutesLearned'],
        'activeLearners': UsageAnalyticsActiveLearnersToJSON(value['activeLearners']),
        'averageSessionLength': value['averageSessionLength'],
        'completionStats': UsageAnalyticsCompletionStatsToJSON(value['completionStats']),
        'subjectMix': ((value['subjectMix'] as Array<any>).map(UsageAnalyticsSubjectMixInnerToJSON)),
        'trends': UsageAnalyticsTrendsToJSON(value['trends']),
        'engagement': UsageAnalyticsEngagementToJSON(value['engagement']),
        'lastUpdated': ((value['lastUpdated']).toISOString()),
    };
}

