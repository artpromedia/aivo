/* tslint:disable */
/* eslint-disable */
/**
 * Admin Portal Aggregator API
 * Read-only aggregator API for admin dashboard widgets and KPIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@aivo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface NamespacesOverviewTopNamespacesInner
 */
export interface NamespacesOverviewTopNamespacesInner {
    /**
     * 
     * @type {string}
     * @memberof NamespacesOverviewTopNamespacesInner
     */
    namespaceId: string;
    /**
     * 
     * @type {string}
     * @memberof NamespacesOverviewTopNamespacesInner
     */
    learnerId: string;
    /**
     * 
     * @type {string}
     * @memberof NamespacesOverviewTopNamespacesInner
     */
    learnerName?: string;
    /**
     * 
     * @type {string}
     * @memberof NamespacesOverviewTopNamespacesInner
     */
    status: NamespacesOverviewTopNamespacesInnerStatusEnum;
    /**
     * Storage used by this namespace (MB)
     * @type {number}
     * @memberof NamespacesOverviewTopNamespacesInner
     */
    storageUsed: number;
    /**
     * Number of documents in namespace
     * @type {number}
     * @memberof NamespacesOverviewTopNamespacesInner
     */
    documentsCount?: number;
    /**
     * 
     * @type {Date}
     * @memberof NamespacesOverviewTopNamespacesInner
     */
    lastActivity: Date;
    /**
     * Number of vectors in namespace
     * @type {number}
     * @memberof NamespacesOverviewTopNamespacesInner
     */
    vectorCount?: number;
}


/**
 * @export
 */
export const NamespacesOverviewTopNamespacesInnerStatusEnum = {
    Active: 'active',
    Inactive: 'inactive',
    Initializing: 'initializing',
    Error: 'error'
} as const;
export type NamespacesOverviewTopNamespacesInnerStatusEnum = typeof NamespacesOverviewTopNamespacesInnerStatusEnum[keyof typeof NamespacesOverviewTopNamespacesInnerStatusEnum];


/**
 * Check if a given object implements the NamespacesOverviewTopNamespacesInner interface.
 */
export function instanceOfNamespacesOverviewTopNamespacesInner(value: object): value is NamespacesOverviewTopNamespacesInner {
    if (!('namespaceId' in value) || value['namespaceId'] === undefined) return false;
    if (!('learnerId' in value) || value['learnerId'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('storageUsed' in value) || value['storageUsed'] === undefined) return false;
    if (!('lastActivity' in value) || value['lastActivity'] === undefined) return false;
    return true;
}

export function NamespacesOverviewTopNamespacesInnerFromJSON(json: any): NamespacesOverviewTopNamespacesInner {
    return NamespacesOverviewTopNamespacesInnerFromJSONTyped(json, false);
}

export function NamespacesOverviewTopNamespacesInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): NamespacesOverviewTopNamespacesInner {
    if (json == null) {
        return json;
    }
    return {
        
        'namespaceId': json['namespaceId'],
        'learnerId': json['learnerId'],
        'learnerName': json['learnerName'] == null ? undefined : json['learnerName'],
        'status': json['status'],
        'storageUsed': json['storageUsed'],
        'documentsCount': json['documentsCount'] == null ? undefined : json['documentsCount'],
        'lastActivity': (new Date(json['lastActivity'])),
        'vectorCount': json['vectorCount'] == null ? undefined : json['vectorCount'],
    };
}

export function NamespacesOverviewTopNamespacesInnerToJSON(json: any): NamespacesOverviewTopNamespacesInner {
    return NamespacesOverviewTopNamespacesInnerToJSONTyped(json, false);
}

export function NamespacesOverviewTopNamespacesInnerToJSONTyped(value?: NamespacesOverviewTopNamespacesInner | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'namespaceId': value['namespaceId'],
        'learnerId': value['learnerId'],
        'learnerName': value['learnerName'],
        'status': value['status'],
        'storageUsed': value['storageUsed'],
        'documentsCount': value['documentsCount'],
        'lastActivity': ((value['lastActivity']).toISOString()),
        'vectorCount': value['vectorCount'],
    };
}

