/* tslint:disable */
/* eslint-disable */
/**
 * Learning Orchestrator API
 * Course orchestration and learning path management service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@aivo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Assessment
 */
export interface Assessment {
    /**
     * 
     * @type {string}
     * @memberof Assessment
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Assessment
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Assessment
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Assessment
     */
    type: AssessmentTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Assessment
     */
    courseId: string;
    /**
     * 
     * @type {string}
     * @memberof Assessment
     */
    moduleId?: string;
    /**
     * 
     * @type {number}
     * @memberof Assessment
     */
    maxScore: number;
    /**
     * 
     * @type {number}
     * @memberof Assessment
     */
    passingScore: number;
    /**
     * Time limit in minutes
     * @type {number}
     * @memberof Assessment
     */
    timeLimit: number;
    /**
     * 
     * @type {number}
     * @memberof Assessment
     */
    attemptsAllowed?: number;
    /**
     * 
     * @type {number}
     * @memberof Assessment
     */
    questionCount?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Assessment
     */
    isRequired?: boolean;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof Assessment
     */
    metadata?: { [key: string]: any; };
    /**
     * 
     * @type {Date}
     * @memberof Assessment
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Assessment
     */
    updatedAt: Date;
}


/**
 * @export
 */
export const AssessmentTypeEnum = {
    Quiz: 'quiz',
    Assignment: 'assignment',
    FinalExam: 'final_exam',
    Certification: 'certification'
} as const;
export type AssessmentTypeEnum = typeof AssessmentTypeEnum[keyof typeof AssessmentTypeEnum];


/**
 * Check if a given object implements the Assessment interface.
 */
export function instanceOfAssessment(value: object): value is Assessment {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('courseId' in value) || value['courseId'] === undefined) return false;
    if (!('maxScore' in value) || value['maxScore'] === undefined) return false;
    if (!('passingScore' in value) || value['passingScore'] === undefined) return false;
    if (!('timeLimit' in value) || value['timeLimit'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function AssessmentFromJSON(json: any): Assessment {
    return AssessmentFromJSONTyped(json, false);
}

export function AssessmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Assessment {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'title': json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'type': json['type'],
        'courseId': json['courseId'],
        'moduleId': json['moduleId'] == null ? undefined : json['moduleId'],
        'maxScore': json['maxScore'],
        'passingScore': json['passingScore'],
        'timeLimit': json['timeLimit'],
        'attemptsAllowed': json['attemptsAllowed'] == null ? undefined : json['attemptsAllowed'],
        'questionCount': json['questionCount'] == null ? undefined : json['questionCount'],
        'isRequired': json['isRequired'] == null ? undefined : json['isRequired'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function AssessmentToJSON(json: any): Assessment {
    return AssessmentToJSONTyped(json, false);
}

export function AssessmentToJSONTyped(value?: Assessment | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'title': value['title'],
        'description': value['description'],
        'type': value['type'],
        'courseId': value['courseId'],
        'moduleId': value['moduleId'],
        'maxScore': value['maxScore'],
        'passingScore': value['passingScore'],
        'timeLimit': value['timeLimit'],
        'attemptsAllowed': value['attemptsAllowed'],
        'questionCount': value['questionCount'],
        'isRequired': value['isRequired'],
        'metadata': value['metadata'],
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
    };
}

