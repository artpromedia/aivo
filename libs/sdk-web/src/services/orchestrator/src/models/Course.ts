/* tslint:disable */
/* eslint-disable */
/**
 * Learning Orchestrator API
 * Course orchestration and learning path management service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@aivo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Course
 */
export interface Course {
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    shortDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    category: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Course
     */
    tags?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    difficulty: CourseDifficultyEnum;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    status: CourseStatusEnum;
    /**
     * Estimated duration in minutes
     * @type {number}
     * @memberof Course
     */
    estimatedDuration: number;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    thumbnailUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    instructorId?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Course
     */
    prerequisites?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Course
     */
    learningObjectives?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Course
     */
    moduleCount?: number;
    /**
     * 
     * @type {number}
     * @memberof Course
     */
    enrollmentCount?: number;
    /**
     * 
     * @type {number}
     * @memberof Course
     */
    averageRating?: number;
    /**
     * 
     * @type {number}
     * @memberof Course
     */
    reviewCount?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Course
     */
    isPublic?: boolean;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof Course
     */
    metadata?: { [key: string]: any; };
    /**
     * 
     * @type {Date}
     * @memberof Course
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Course
     */
    updatedAt: Date;
}


/**
 * @export
 */
export const CourseDifficultyEnum = {
    Beginner: 'beginner',
    Intermediate: 'intermediate',
    Advanced: 'advanced'
} as const;
export type CourseDifficultyEnum = typeof CourseDifficultyEnum[keyof typeof CourseDifficultyEnum];

/**
 * @export
 */
export const CourseStatusEnum = {
    Draft: 'draft',
    Published: 'published',
    Archived: 'archived'
} as const;
export type CourseStatusEnum = typeof CourseStatusEnum[keyof typeof CourseStatusEnum];


/**
 * Check if a given object implements the Course interface.
 */
export function instanceOfCourse(value: object): value is Course {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('category' in value) || value['category'] === undefined) return false;
    if (!('difficulty' in value) || value['difficulty'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('estimatedDuration' in value) || value['estimatedDuration'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function CourseFromJSON(json: any): Course {
    return CourseFromJSONTyped(json, false);
}

export function CourseFromJSONTyped(json: any, ignoreDiscriminator: boolean): Course {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'title': json['title'],
        'description': json['description'],
        'shortDescription': json['shortDescription'] == null ? undefined : json['shortDescription'],
        'category': json['category'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'difficulty': json['difficulty'],
        'status': json['status'],
        'estimatedDuration': json['estimatedDuration'],
        'thumbnailUrl': json['thumbnailUrl'] == null ? undefined : json['thumbnailUrl'],
        'instructorId': json['instructorId'] == null ? undefined : json['instructorId'],
        'prerequisites': json['prerequisites'] == null ? undefined : json['prerequisites'],
        'learningObjectives': json['learningObjectives'] == null ? undefined : json['learningObjectives'],
        'moduleCount': json['moduleCount'] == null ? undefined : json['moduleCount'],
        'enrollmentCount': json['enrollmentCount'] == null ? undefined : json['enrollmentCount'],
        'averageRating': json['averageRating'] == null ? undefined : json['averageRating'],
        'reviewCount': json['reviewCount'] == null ? undefined : json['reviewCount'],
        'isPublic': json['isPublic'] == null ? undefined : json['isPublic'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function CourseToJSON(json: any): Course {
    return CourseToJSONTyped(json, false);
}

export function CourseToJSONTyped(value?: Course | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'title': value['title'],
        'description': value['description'],
        'shortDescription': value['shortDescription'],
        'category': value['category'],
        'tags': value['tags'],
        'difficulty': value['difficulty'],
        'status': value['status'],
        'estimatedDuration': value['estimatedDuration'],
        'thumbnailUrl': value['thumbnailUrl'],
        'instructorId': value['instructorId'],
        'prerequisites': value['prerequisites'],
        'learningObjectives': value['learningObjectives'],
        'moduleCount': value['moduleCount'],
        'enrollmentCount': value['enrollmentCount'],
        'averageRating': value['averageRating'],
        'reviewCount': value['reviewCount'],
        'isPublic': value['isPublic'],
        'metadata': value['metadata'],
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
    };
}

