/* tslint:disable */
/* eslint-disable */
/**
 * Learning Orchestrator API
 * Course orchestration and learning path management service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@aivo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssessmentResult,
  ListAssessments200Response,
  SubmitAssessmentRequest,
} from '../models/index';
import {
    AssessmentResultFromJSON,
    AssessmentResultToJSON,
    ListAssessments200ResponseFromJSON,
    ListAssessments200ResponseToJSON,
    SubmitAssessmentRequestFromJSON,
    SubmitAssessmentRequestToJSON,
} from '../models/index';

export interface ListAssessmentsRequest {
    courseId?: string;
    moduleId?: string;
    type?: ListAssessmentsTypeEnum;
    limit?: number;
    offset?: number;
}

export interface SubmitAssessmentOperationRequest {
    assessmentId: string;
    submitAssessmentRequest: SubmitAssessmentRequest;
}

/**
 * 
 */
export class AssessmentsApi extends runtime.BaseAPI {

    /**
     * List assessments
     */
    async listAssessmentsRaw(requestParameters: ListAssessmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListAssessments200Response>> {
        const queryParameters: any = {};

        if (requestParameters['courseId'] != null) {
            queryParameters['courseId'] = requestParameters['courseId'];
        }

        if (requestParameters['moduleId'] != null) {
            queryParameters['moduleId'] = requestParameters['moduleId'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/assessments`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListAssessments200ResponseFromJSON(jsonValue));
    }

    /**
     * List assessments
     */
    async listAssessments(requestParameters: ListAssessmentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListAssessments200Response> {
        const response = await this.listAssessmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Submit assessment
     */
    async submitAssessmentRaw(requestParameters: SubmitAssessmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssessmentResult>> {
        if (requestParameters['assessmentId'] == null) {
            throw new runtime.RequiredError(
                'assessmentId',
                'Required parameter "assessmentId" was null or undefined when calling submitAssessment().'
            );
        }

        if (requestParameters['submitAssessmentRequest'] == null) {
            throw new runtime.RequiredError(
                'submitAssessmentRequest',
                'Required parameter "submitAssessmentRequest" was null or undefined when calling submitAssessment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/assessments/{assessmentId}/submit`;
        urlPath = urlPath.replace(`{${"assessmentId"}}`, encodeURIComponent(String(requestParameters['assessmentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubmitAssessmentRequestToJSON(requestParameters['submitAssessmentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssessmentResultFromJSON(jsonValue));
    }

    /**
     * Submit assessment
     */
    async submitAssessment(requestParameters: SubmitAssessmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssessmentResult> {
        const response = await this.submitAssessmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ListAssessmentsTypeEnum = {
    Quiz: 'quiz',
    Assignment: 'assignment',
    FinalExam: 'final_exam',
    Certification: 'certification'
} as const;
export type ListAssessmentsTypeEnum = typeof ListAssessmentsTypeEnum[keyof typeof ListAssessmentsTypeEnum];
