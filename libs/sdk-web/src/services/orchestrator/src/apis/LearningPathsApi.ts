/* tslint:disable */
/* eslint-disable */
/**
 * Learning Orchestrator API
 * Course orchestration and learning path management service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@aivo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateLearningPathRequest,
  LearningPath,
  LearningPathDetailed,
  ListLearningPaths200Response,
  ValidationError,
} from '../models/index';
import {
    CreateLearningPathRequestFromJSON,
    CreateLearningPathRequestToJSON,
    LearningPathFromJSON,
    LearningPathToJSON,
    LearningPathDetailedFromJSON,
    LearningPathDetailedToJSON,
    ListLearningPaths200ResponseFromJSON,
    ListLearningPaths200ResponseToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface CreateLearningPathOperationRequest {
    createLearningPathRequest: CreateLearningPathRequest;
}

export interface GetLearningPathRequest {
    pathId: string;
}

export interface ListLearningPathsRequest {
    tenantId?: string;
    category?: string;
    status?: ListLearningPathsStatusEnum;
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class LearningPathsApi extends runtime.BaseAPI {

    /**
     * Create new learning path
     */
    async createLearningPathRaw(requestParameters: CreateLearningPathOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LearningPath>> {
        if (requestParameters['createLearningPathRequest'] == null) {
            throw new runtime.RequiredError(
                'createLearningPathRequest',
                'Required parameter "createLearningPathRequest" was null or undefined when calling createLearningPath().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/learning-paths`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLearningPathRequestToJSON(requestParameters['createLearningPathRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LearningPathFromJSON(jsonValue));
    }

    /**
     * Create new learning path
     */
    async createLearningPath(requestParameters: CreateLearningPathOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LearningPath> {
        const response = await this.createLearningPathRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get learning path by ID
     */
    async getLearningPathRaw(requestParameters: GetLearningPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LearningPathDetailed>> {
        if (requestParameters['pathId'] == null) {
            throw new runtime.RequiredError(
                'pathId',
                'Required parameter "pathId" was null or undefined when calling getLearningPath().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/learning-paths/{pathId}`;
        urlPath = urlPath.replace(`{${"pathId"}}`, encodeURIComponent(String(requestParameters['pathId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LearningPathDetailedFromJSON(jsonValue));
    }

    /**
     * Get learning path by ID
     */
    async getLearningPath(requestParameters: GetLearningPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LearningPathDetailed> {
        const response = await this.getLearningPathRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List learning paths
     */
    async listLearningPathsRaw(requestParameters: ListLearningPathsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListLearningPaths200Response>> {
        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['category'] != null) {
            queryParameters['category'] = requestParameters['category'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/learning-paths`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListLearningPaths200ResponseFromJSON(jsonValue));
    }

    /**
     * List learning paths
     */
    async listLearningPaths(requestParameters: ListLearningPathsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListLearningPaths200Response> {
        const response = await this.listLearningPathsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ListLearningPathsStatusEnum = {
    Draft: 'draft',
    Published: 'published',
    Archived: 'archived'
} as const;
export type ListLearningPathsStatusEnum = typeof ListLearningPathsStatusEnum[keyof typeof ListLearningPathsStatusEnum];
