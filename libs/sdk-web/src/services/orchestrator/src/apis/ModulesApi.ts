/* tslint:disable */
/* eslint-disable */
/**
 * Learning Orchestrator API
 * Course orchestration and learning path management service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@aivo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateModuleRequest,
  Module,
} from '../models/index';
import {
    CreateModuleRequestFromJSON,
    CreateModuleRequestToJSON,
    ModuleFromJSON,
    ModuleToJSON,
} from '../models/index';

export interface AddCourseModuleRequest {
    courseId: string;
    createModuleRequest: CreateModuleRequest;
}

export interface GetCourseModulesRequest {
    courseId: string;
}

/**
 * 
 */
export class ModulesApi extends runtime.BaseAPI {

    /**
     * Add module to course
     */
    async addCourseModuleRaw(requestParameters: AddCourseModuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Module>> {
        if (requestParameters['courseId'] == null) {
            throw new runtime.RequiredError(
                'courseId',
                'Required parameter "courseId" was null or undefined when calling addCourseModule().'
            );
        }

        if (requestParameters['createModuleRequest'] == null) {
            throw new runtime.RequiredError(
                'createModuleRequest',
                'Required parameter "createModuleRequest" was null or undefined when calling addCourseModule().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/courses/{courseId}/modules`;
        urlPath = urlPath.replace(`{${"courseId"}}`, encodeURIComponent(String(requestParameters['courseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateModuleRequestToJSON(requestParameters['createModuleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModuleFromJSON(jsonValue));
    }

    /**
     * Add module to course
     */
    async addCourseModule(requestParameters: AddCourseModuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Module> {
        const response = await this.addCourseModuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get course modules
     */
    async getCourseModulesRaw(requestParameters: GetCourseModulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Module>>> {
        if (requestParameters['courseId'] == null) {
            throw new runtime.RequiredError(
                'courseId',
                'Required parameter "courseId" was null or undefined when calling getCourseModules().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/courses/{courseId}/modules`;
        urlPath = urlPath.replace(`{${"courseId"}}`, encodeURIComponent(String(requestParameters['courseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModuleFromJSON));
    }

    /**
     * Get course modules
     */
    async getCourseModules(requestParameters: GetCourseModulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Module>> {
        const response = await this.getCourseModulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
