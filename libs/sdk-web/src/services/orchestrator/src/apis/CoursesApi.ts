/* tslint:disable */
/* eslint-disable */
/**
 * Learning Orchestrator API
 * Course orchestration and learning path management service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@aivo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Course,
  CourseDetailed,
  CreateCourseRequest,
  ListCourses200Response,
  UpdateCourseRequest,
  ValidationError,
} from '../models/index';
import {
    CourseFromJSON,
    CourseToJSON,
    CourseDetailedFromJSON,
    CourseDetailedToJSON,
    CreateCourseRequestFromJSON,
    CreateCourseRequestToJSON,
    ListCourses200ResponseFromJSON,
    ListCourses200ResponseToJSON,
    UpdateCourseRequestFromJSON,
    UpdateCourseRequestToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface CreateCourseOperationRequest {
    createCourseRequest: CreateCourseRequest;
}

export interface DeleteCourseRequest {
    courseId: string;
}

export interface GetCourseRequest {
    courseId: string;
}

export interface ListCoursesRequest {
    tenantId?: string;
    category?: string;
    difficulty?: ListCoursesDifficultyEnum;
    status?: ListCoursesStatusEnum;
    search?: string;
    limit?: number;
    offset?: number;
}

export interface UpdateCourseOperationRequest {
    courseId: string;
    updateCourseRequest: UpdateCourseRequest;
}

/**
 * 
 */
export class CoursesApi extends runtime.BaseAPI {

    /**
     * Create new course
     */
    async createCourseRaw(requestParameters: CreateCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Course>> {
        if (requestParameters['createCourseRequest'] == null) {
            throw new runtime.RequiredError(
                'createCourseRequest',
                'Required parameter "createCourseRequest" was null or undefined when calling createCourse().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/courses`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCourseRequestToJSON(requestParameters['createCourseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseFromJSON(jsonValue));
    }

    /**
     * Create new course
     */
    async createCourse(requestParameters: CreateCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Course> {
        const response = await this.createCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete course
     */
    async deleteCourseRaw(requestParameters: DeleteCourseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['courseId'] == null) {
            throw new runtime.RequiredError(
                'courseId',
                'Required parameter "courseId" was null or undefined when calling deleteCourse().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/courses/{courseId}`;
        urlPath = urlPath.replace(`{${"courseId"}}`, encodeURIComponent(String(requestParameters['courseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete course
     */
    async deleteCourse(requestParameters: DeleteCourseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCourseRaw(requestParameters, initOverrides);
    }

    /**
     * Get course by ID
     */
    async getCourseRaw(requestParameters: GetCourseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CourseDetailed>> {
        if (requestParameters['courseId'] == null) {
            throw new runtime.RequiredError(
                'courseId',
                'Required parameter "courseId" was null or undefined when calling getCourse().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/courses/{courseId}`;
        urlPath = urlPath.replace(`{${"courseId"}}`, encodeURIComponent(String(requestParameters['courseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseDetailedFromJSON(jsonValue));
    }

    /**
     * Get course by ID
     */
    async getCourse(requestParameters: GetCourseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CourseDetailed> {
        const response = await this.getCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List courses
     */
    async listCoursesRaw(requestParameters: ListCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListCourses200Response>> {
        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['category'] != null) {
            queryParameters['category'] = requestParameters['category'];
        }

        if (requestParameters['difficulty'] != null) {
            queryParameters['difficulty'] = requestParameters['difficulty'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/courses`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListCourses200ResponseFromJSON(jsonValue));
    }

    /**
     * List courses
     */
    async listCourses(requestParameters: ListCoursesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListCourses200Response> {
        const response = await this.listCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update course
     */
    async updateCourseRaw(requestParameters: UpdateCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Course>> {
        if (requestParameters['courseId'] == null) {
            throw new runtime.RequiredError(
                'courseId',
                'Required parameter "courseId" was null or undefined when calling updateCourse().'
            );
        }

        if (requestParameters['updateCourseRequest'] == null) {
            throw new runtime.RequiredError(
                'updateCourseRequest',
                'Required parameter "updateCourseRequest" was null or undefined when calling updateCourse().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/courses/{courseId}`;
        urlPath = urlPath.replace(`{${"courseId"}}`, encodeURIComponent(String(requestParameters['courseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCourseRequestToJSON(requestParameters['updateCourseRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CourseFromJSON(jsonValue));
    }

    /**
     * Update course
     */
    async updateCourse(requestParameters: UpdateCourseOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Course> {
        const response = await this.updateCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ListCoursesDifficultyEnum = {
    Beginner: 'beginner',
    Intermediate: 'intermediate',
    Advanced: 'advanced'
} as const;
export type ListCoursesDifficultyEnum = typeof ListCoursesDifficultyEnum[keyof typeof ListCoursesDifficultyEnum];
/**
 * @export
 */
export const ListCoursesStatusEnum = {
    Draft: 'draft',
    Published: 'published',
    Archived: 'archived'
} as const;
export type ListCoursesStatusEnum = typeof ListCoursesStatusEnum[keyof typeof ListCoursesStatusEnum];
