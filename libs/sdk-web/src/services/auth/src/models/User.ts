/* tslint:disable */
/* eslint-disable */
/**
 * Authentication Service API
 * Core authentication and authorization service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@aivo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    role: UserRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    tenantId: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    status: UserStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    avatar?: string;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    lastLoginAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    updatedAt: Date;
}


/**
 * @export
 */
export const UserRoleEnum = {
    SuperAdmin: 'super_admin',
    TenantAdmin: 'tenant_admin',
    Instructor: 'instructor',
    Learner: 'learner'
} as const;
export type UserRoleEnum = typeof UserRoleEnum[keyof typeof UserRoleEnum];

/**
 * @export
 */
export const UserStatusEnum = {
    Active: 'active',
    Inactive: 'inactive',
    Pending: 'pending',
    Suspended: 'suspended'
} as const;
export type UserStatusEnum = typeof UserStatusEnum[keyof typeof UserStatusEnum];


/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): value is User {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('firstName' in value) || value['firstName'] === undefined) return false;
    if (!('lastName' in value) || value['lastName'] === undefined) return false;
    if (!('role' in value) || value['role'] === undefined) return false;
    if (!('tenantId' in value) || value['tenantId'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'email': json['email'],
        'firstName': json['firstName'],
        'lastName': json['lastName'],
        'role': json['role'],
        'tenantId': json['tenantId'],
        'status': json['status'],
        'avatar': json['avatar'] == null ? undefined : json['avatar'],
        'lastLoginAt': json['lastLoginAt'] == null ? undefined : (new Date(json['lastLoginAt'])),
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function UserToJSON(json: any): User {
    return UserToJSONTyped(json, false);
}

export function UserToJSONTyped(value?: User | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'email': value['email'],
        'firstName': value['firstName'],
        'lastName': value['lastName'],
        'role': value['role'],
        'tenantId': value['tenantId'],
        'status': value['status'],
        'avatar': value['avatar'],
        'lastLoginAt': value['lastLoginAt'] == null ? undefined : ((value['lastLoginAt']).toISOString()),
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
    };
}

