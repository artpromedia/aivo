/* tslint:disable */
/* eslint-disable */
/**
 * Payments & Billing API
 * Subscription billing and payment processing service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@aivo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CancelSubscriptionRequest,
  CreateSubscriptionRequest,
  ListSubscriptions200Response,
  Subscription,
  UpdateSubscriptionRequest,
  ValidationError,
} from '../models/index';
import {
    CancelSubscriptionRequestFromJSON,
    CancelSubscriptionRequestToJSON,
    CreateSubscriptionRequestFromJSON,
    CreateSubscriptionRequestToJSON,
    ListSubscriptions200ResponseFromJSON,
    ListSubscriptions200ResponseToJSON,
    SubscriptionFromJSON,
    SubscriptionToJSON,
    UpdateSubscriptionRequestFromJSON,
    UpdateSubscriptionRequestToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface CancelSubscriptionOperationRequest {
    subscriptionId: string;
    cancelSubscriptionRequest?: CancelSubscriptionRequest;
}

export interface CreateSubscriptionOperationRequest {
    createSubscriptionRequest: CreateSubscriptionRequest;
}

export interface GetSubscriptionRequest {
    subscriptionId: string;
}

export interface ListSubscriptionsRequest {
    tenantId?: string;
    status?: ListSubscriptionsStatusEnum;
    limit?: number;
    offset?: number;
}

export interface UpdateSubscriptionOperationRequest {
    subscriptionId: string;
    updateSubscriptionRequest: UpdateSubscriptionRequest;
}

/**
 * 
 */
export class SubscriptionsApi extends runtime.BaseAPI {

    /**
     * Cancel subscription
     */
    async cancelSubscriptionRaw(requestParameters: CancelSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters['subscriptionId'] == null) {
            throw new runtime.RequiredError(
                'subscriptionId',
                'Required parameter "subscriptionId" was null or undefined when calling cancelSubscription().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/subscriptions/{subscriptionId}/cancel`;
        urlPath = urlPath.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters['subscriptionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CancelSubscriptionRequestToJSON(requestParameters['cancelSubscriptionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * Cancel subscription
     */
    async cancelSubscription(requestParameters: CancelSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.cancelSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create new subscription
     */
    async createSubscriptionRaw(requestParameters: CreateSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters['createSubscriptionRequest'] == null) {
            throw new runtime.RequiredError(
                'createSubscriptionRequest',
                'Required parameter "createSubscriptionRequest" was null or undefined when calling createSubscription().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/subscriptions`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSubscriptionRequestToJSON(requestParameters['createSubscriptionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * Create new subscription
     */
    async createSubscription(requestParameters: CreateSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.createSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get subscription by ID
     */
    async getSubscriptionRaw(requestParameters: GetSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters['subscriptionId'] == null) {
            throw new runtime.RequiredError(
                'subscriptionId',
                'Required parameter "subscriptionId" was null or undefined when calling getSubscription().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/subscriptions/{subscriptionId}`;
        urlPath = urlPath.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters['subscriptionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * Get subscription by ID
     */
    async getSubscription(requestParameters: GetSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.getSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List subscriptions
     */
    async listSubscriptionsRaw(requestParameters: ListSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListSubscriptions200Response>> {
        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/subscriptions`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListSubscriptions200ResponseFromJSON(jsonValue));
    }

    /**
     * List subscriptions
     */
    async listSubscriptions(requestParameters: ListSubscriptionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListSubscriptions200Response> {
        const response = await this.listSubscriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update subscription
     */
    async updateSubscriptionRaw(requestParameters: UpdateSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscription>> {
        if (requestParameters['subscriptionId'] == null) {
            throw new runtime.RequiredError(
                'subscriptionId',
                'Required parameter "subscriptionId" was null or undefined when calling updateSubscription().'
            );
        }

        if (requestParameters['updateSubscriptionRequest'] == null) {
            throw new runtime.RequiredError(
                'updateSubscriptionRequest',
                'Required parameter "updateSubscriptionRequest" was null or undefined when calling updateSubscription().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/subscriptions/{subscriptionId}`;
        urlPath = urlPath.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters['subscriptionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSubscriptionRequestToJSON(requestParameters['updateSubscriptionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionFromJSON(jsonValue));
    }

    /**
     * Update subscription
     */
    async updateSubscription(requestParameters: UpdateSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscription> {
        const response = await this.updateSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ListSubscriptionsStatusEnum = {
    Active: 'active',
    Inactive: 'inactive',
    PastDue: 'past_due',
    Canceled: 'canceled',
    Trialing: 'trialing'
} as const;
export type ListSubscriptionsStatusEnum = typeof ListSubscriptionsStatusEnum[keyof typeof ListSubscriptionsStatusEnum];
