/* tslint:disable */
/* eslint-disable */
/**
 * Payments & Billing API
 * Subscription billing and payment processing service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@aivo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddPaymentMethodRequest,
  PaymentMethod,
} from '../models/index';
import {
    AddPaymentMethodRequestFromJSON,
    AddPaymentMethodRequestToJSON,
    PaymentMethodFromJSON,
    PaymentMethodToJSON,
} from '../models/index';

export interface AddPaymentMethodOperationRequest {
    addPaymentMethodRequest: AddPaymentMethodRequest;
}

export interface ListPaymentMethodsRequest {
    tenantId: string;
}

export interface RemovePaymentMethodRequest {
    paymentMethodId: string;
}

/**
 * 
 */
export class PaymentMethodsApi extends runtime.BaseAPI {

    /**
     * Add payment method
     */
    async addPaymentMethodRaw(requestParameters: AddPaymentMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentMethod>> {
        if (requestParameters['addPaymentMethodRequest'] == null) {
            throw new runtime.RequiredError(
                'addPaymentMethodRequest',
                'Required parameter "addPaymentMethodRequest" was null or undefined when calling addPaymentMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/payment-methods`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddPaymentMethodRequestToJSON(requestParameters['addPaymentMethodRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentMethodFromJSON(jsonValue));
    }

    /**
     * Add payment method
     */
    async addPaymentMethod(requestParameters: AddPaymentMethodOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentMethod> {
        const response = await this.addPaymentMethodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List payment methods
     */
    async listPaymentMethodsRaw(requestParameters: ListPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PaymentMethod>>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling listPaymentMethods().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/payment-methods`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PaymentMethodFromJSON));
    }

    /**
     * List payment methods
     */
    async listPaymentMethods(requestParameters: ListPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PaymentMethod>> {
        const response = await this.listPaymentMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove payment method
     */
    async removePaymentMethodRaw(requestParameters: RemovePaymentMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['paymentMethodId'] == null) {
            throw new runtime.RequiredError(
                'paymentMethodId',
                'Required parameter "paymentMethodId" was null or undefined when calling removePaymentMethod().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/payment-methods/{paymentMethodId}`;
        urlPath = urlPath.replace(`{${"paymentMethodId"}}`, encodeURIComponent(String(requestParameters['paymentMethodId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove payment method
     */
    async removePaymentMethod(requestParameters: RemovePaymentMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removePaymentMethodRaw(requestParameters, initOverrides);
    }

}
