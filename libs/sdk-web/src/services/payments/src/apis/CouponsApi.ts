/* tslint:disable */
/* eslint-disable */
/**
 * Payments & Billing API
 * Subscription billing and payment processing service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@aivo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Coupon,
  CreateCouponRequest,
} from '../models/index';
import {
    CouponFromJSON,
    CouponToJSON,
    CreateCouponRequestFromJSON,
    CreateCouponRequestToJSON,
} from '../models/index';

export interface CreateCouponOperationRequest {
    createCouponRequest: CreateCouponRequest;
}

export interface ListCouponsRequest {
    tenantId?: string;
    active?: boolean;
    limit?: number;
}

/**
 * 
 */
export class CouponsApi extends runtime.BaseAPI {

    /**
     * Create coupon
     */
    async createCouponRaw(requestParameters: CreateCouponOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Coupon>> {
        if (requestParameters['createCouponRequest'] == null) {
            throw new runtime.RequiredError(
                'createCouponRequest',
                'Required parameter "createCouponRequest" was null or undefined when calling createCoupon().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/coupons`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCouponRequestToJSON(requestParameters['createCouponRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CouponFromJSON(jsonValue));
    }

    /**
     * Create coupon
     */
    async createCoupon(requestParameters: CreateCouponOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Coupon> {
        const response = await this.createCouponRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List coupons
     */
    async listCouponsRaw(requestParameters: ListCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Coupon>>> {
        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['active'] != null) {
            queryParameters['active'] = requestParameters['active'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/coupons`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CouponFromJSON));
    }

    /**
     * List coupons
     */
    async listCoupons(requestParameters: ListCouponsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Coupon>> {
        const response = await this.listCouponsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
