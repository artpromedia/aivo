/* tslint:disable */
/* eslint-disable */
/**
 * Payments & Billing API
 * Subscription billing and payment processing service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@aivo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Discount } from './Discount';
import {
    DiscountFromJSON,
    DiscountFromJSONTyped,
    DiscountToJSON,
    DiscountToJSONTyped,
} from './Discount';

/**
 * 
 * @export
 * @interface Subscription
 */
export interface Subscription {
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    tenantId: string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    planId: string;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    status: SubscriptionStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof Subscription
     */
    quantity?: number;
    /**
     * Amount in cents
     * @type {number}
     * @memberof Subscription
     */
    unitAmount?: number;
    /**
     * 
     * @type {string}
     * @memberof Subscription
     */
    currency?: string;
    /**
     * 
     * @type {Date}
     * @memberof Subscription
     */
    currentPeriodStart: Date;
    /**
     * 
     * @type {Date}
     * @memberof Subscription
     */
    currentPeriodEnd: Date;
    /**
     * 
     * @type {Date}
     * @memberof Subscription
     */
    trialStart?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Subscription
     */
    trialEnd?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof Subscription
     */
    cancelAtPeriodEnd?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Subscription
     */
    canceledAt?: Date;
    /**
     * 
     * @type {Discount}
     * @memberof Subscription
     */
    discount?: Discount;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof Subscription
     */
    metadata?: { [key: string]: any; };
    /**
     * 
     * @type {Date}
     * @memberof Subscription
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Subscription
     */
    updatedAt: Date;
}


/**
 * @export
 */
export const SubscriptionStatusEnum = {
    Active: 'active',
    Inactive: 'inactive',
    PastDue: 'past_due',
    Canceled: 'canceled',
    Trialing: 'trialing'
} as const;
export type SubscriptionStatusEnum = typeof SubscriptionStatusEnum[keyof typeof SubscriptionStatusEnum];


/**
 * Check if a given object implements the Subscription interface.
 */
export function instanceOfSubscription(value: object): value is Subscription {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('tenantId' in value) || value['tenantId'] === undefined) return false;
    if (!('planId' in value) || value['planId'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('currentPeriodStart' in value) || value['currentPeriodStart'] === undefined) return false;
    if (!('currentPeriodEnd' in value) || value['currentPeriodEnd'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function SubscriptionFromJSON(json: any): Subscription {
    return SubscriptionFromJSONTyped(json, false);
}

export function SubscriptionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Subscription {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'tenantId': json['tenantId'],
        'planId': json['planId'],
        'status': json['status'],
        'quantity': json['quantity'] == null ? undefined : json['quantity'],
        'unitAmount': json['unitAmount'] == null ? undefined : json['unitAmount'],
        'currency': json['currency'] == null ? undefined : json['currency'],
        'currentPeriodStart': (new Date(json['currentPeriodStart'])),
        'currentPeriodEnd': (new Date(json['currentPeriodEnd'])),
        'trialStart': json['trialStart'] == null ? undefined : (new Date(json['trialStart'])),
        'trialEnd': json['trialEnd'] == null ? undefined : (new Date(json['trialEnd'])),
        'cancelAtPeriodEnd': json['cancelAtPeriodEnd'] == null ? undefined : json['cancelAtPeriodEnd'],
        'canceledAt': json['canceledAt'] == null ? undefined : (new Date(json['canceledAt'])),
        'discount': json['discount'] == null ? undefined : DiscountFromJSON(json['discount']),
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function SubscriptionToJSON(json: any): Subscription {
    return SubscriptionToJSONTyped(json, false);
}

export function SubscriptionToJSONTyped(value?: Subscription | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'tenantId': value['tenantId'],
        'planId': value['planId'],
        'status': value['status'],
        'quantity': value['quantity'],
        'unitAmount': value['unitAmount'],
        'currency': value['currency'],
        'currentPeriodStart': ((value['currentPeriodStart']).toISOString()),
        'currentPeriodEnd': ((value['currentPeriodEnd']).toISOString()),
        'trialStart': value['trialStart'] == null ? undefined : ((value['trialStart']).toISOString()),
        'trialEnd': value['trialEnd'] == null ? undefined : ((value['trialEnd']).toISOString()),
        'cancelAtPeriodEnd': value['cancelAtPeriodEnd'],
        'canceledAt': value['canceledAt'] == null ? undefined : ((value['canceledAt']).toISOString()),
        'discount': DiscountToJSON(value['discount']),
        'metadata': value['metadata'],
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
    };
}

