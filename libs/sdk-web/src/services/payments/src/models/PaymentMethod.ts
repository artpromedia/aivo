/* tslint:disable */
/* eslint-disable */
/**
 * Payments & Billing API
 * Subscription billing and payment processing service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@aivo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PaymentMethodBankAccount } from './PaymentMethodBankAccount';
import {
    PaymentMethodBankAccountFromJSON,
    PaymentMethodBankAccountFromJSONTyped,
    PaymentMethodBankAccountToJSON,
    PaymentMethodBankAccountToJSONTyped,
} from './PaymentMethodBankAccount';
import type { PaymentMethodCard } from './PaymentMethodCard';
import {
    PaymentMethodCardFromJSON,
    PaymentMethodCardFromJSONTyped,
    PaymentMethodCardToJSON,
    PaymentMethodCardToJSONTyped,
} from './PaymentMethodCard';

/**
 * 
 * @export
 * @interface PaymentMethod
 */
export interface PaymentMethod {
    /**
     * 
     * @type {string}
     * @memberof PaymentMethod
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethod
     */
    tenantId: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethod
     */
    type: PaymentMethodTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof PaymentMethod
     */
    isDefault: boolean;
    /**
     * 
     * @type {PaymentMethodCard}
     * @memberof PaymentMethod
     */
    card?: PaymentMethodCard;
    /**
     * 
     * @type {PaymentMethodBankAccount}
     * @memberof PaymentMethod
     */
    bankAccount?: PaymentMethodBankAccount;
    /**
     * 
     * @type {Date}
     * @memberof PaymentMethod
     */
    createdAt: Date;
}


/**
 * @export
 */
export const PaymentMethodTypeEnum = {
    Card: 'card',
    BankAccount: 'bank_account',
    Paypal: 'paypal'
} as const;
export type PaymentMethodTypeEnum = typeof PaymentMethodTypeEnum[keyof typeof PaymentMethodTypeEnum];


/**
 * Check if a given object implements the PaymentMethod interface.
 */
export function instanceOfPaymentMethod(value: object): value is PaymentMethod {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('tenantId' in value) || value['tenantId'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('isDefault' in value) || value['isDefault'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    return true;
}

export function PaymentMethodFromJSON(json: any): PaymentMethod {
    return PaymentMethodFromJSONTyped(json, false);
}

export function PaymentMethodFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentMethod {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'tenantId': json['tenantId'],
        'type': json['type'],
        'isDefault': json['isDefault'],
        'card': json['card'] == null ? undefined : PaymentMethodCardFromJSON(json['card']),
        'bankAccount': json['bankAccount'] == null ? undefined : PaymentMethodBankAccountFromJSON(json['bankAccount']),
        'createdAt': (new Date(json['createdAt'])),
    };
}

export function PaymentMethodToJSON(json: any): PaymentMethod {
    return PaymentMethodToJSONTyped(json, false);
}

export function PaymentMethodToJSONTyped(value?: PaymentMethod | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'tenantId': value['tenantId'],
        'type': value['type'],
        'isDefault': value['isDefault'],
        'card': PaymentMethodCardToJSON(value['card']),
        'bankAccount': PaymentMethodBankAccountToJSON(value['bankAccount']),
        'createdAt': ((value['createdAt']).toISOString()),
    };
}

