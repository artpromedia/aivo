/* tslint:disable */
/* eslint-disable */
/**
 * Payments & Billing API
 * Subscription billing and payment processing service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@aivo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { InvoiceLineItem } from './InvoiceLineItem';
import {
    InvoiceLineItemFromJSON,
    InvoiceLineItemFromJSONTyped,
    InvoiceLineItemToJSON,
    InvoiceLineItemToJSONTyped,
} from './InvoiceLineItem';

/**
 * 
 * @export
 * @interface Invoice
 */
export interface Invoice {
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    subscriptionId: string;
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    tenantId: string;
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    invoiceNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    status: InvoiceStatusEnum;
    /**
     * Amount in cents
     * @type {number}
     * @memberof Invoice
     */
    amountDue: number;
    /**
     * Amount in cents
     * @type {number}
     * @memberof Invoice
     */
    amountPaid: number;
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    currency: string;
    /**
     * 
     * @type {Date}
     * @memberof Invoice
     */
    dueDate: Date;
    /**
     * 
     * @type {Date}
     * @memberof Invoice
     */
    paidAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Invoice
     */
    periodStart?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Invoice
     */
    periodEnd?: Date;
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    downloadUrl?: string;
    /**
     * 
     * @type {Array<InvoiceLineItem>}
     * @memberof Invoice
     */
    lineItems?: Array<InvoiceLineItem>;
    /**
     * 
     * @type {Date}
     * @memberof Invoice
     */
    createdAt: Date;
}


/**
 * @export
 */
export const InvoiceStatusEnum = {
    Draft: 'draft',
    Open: 'open',
    Paid: 'paid',
    Void: 'void',
    Uncollectible: 'uncollectible'
} as const;
export type InvoiceStatusEnum = typeof InvoiceStatusEnum[keyof typeof InvoiceStatusEnum];


/**
 * Check if a given object implements the Invoice interface.
 */
export function instanceOfInvoice(value: object): value is Invoice {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('subscriptionId' in value) || value['subscriptionId'] === undefined) return false;
    if (!('tenantId' in value) || value['tenantId'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('amountDue' in value) || value['amountDue'] === undefined) return false;
    if (!('amountPaid' in value) || value['amountPaid'] === undefined) return false;
    if (!('currency' in value) || value['currency'] === undefined) return false;
    if (!('dueDate' in value) || value['dueDate'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    return true;
}

export function InvoiceFromJSON(json: any): Invoice {
    return InvoiceFromJSONTyped(json, false);
}

export function InvoiceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Invoice {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'subscriptionId': json['subscriptionId'],
        'tenantId': json['tenantId'],
        'invoiceNumber': json['invoiceNumber'] == null ? undefined : json['invoiceNumber'],
        'status': json['status'],
        'amountDue': json['amountDue'],
        'amountPaid': json['amountPaid'],
        'currency': json['currency'],
        'dueDate': (new Date(json['dueDate'])),
        'paidAt': json['paidAt'] == null ? undefined : (new Date(json['paidAt'])),
        'periodStart': json['periodStart'] == null ? undefined : (new Date(json['periodStart'])),
        'periodEnd': json['periodEnd'] == null ? undefined : (new Date(json['periodEnd'])),
        'downloadUrl': json['downloadUrl'] == null ? undefined : json['downloadUrl'],
        'lineItems': json['lineItems'] == null ? undefined : ((json['lineItems'] as Array<any>).map(InvoiceLineItemFromJSON)),
        'createdAt': (new Date(json['createdAt'])),
    };
}

export function InvoiceToJSON(json: any): Invoice {
    return InvoiceToJSONTyped(json, false);
}

export function InvoiceToJSONTyped(value?: Invoice | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'subscriptionId': value['subscriptionId'],
        'tenantId': value['tenantId'],
        'invoiceNumber': value['invoiceNumber'],
        'status': value['status'],
        'amountDue': value['amountDue'],
        'amountPaid': value['amountPaid'],
        'currency': value['currency'],
        'dueDate': ((value['dueDate']).toISOString()),
        'paidAt': value['paidAt'] == null ? undefined : ((value['paidAt']).toISOString()),
        'periodStart': value['periodStart'] == null ? undefined : ((value['periodStart']).toISOString()),
        'periodEnd': value['periodEnd'] == null ? undefined : ((value['periodEnd']).toISOString()),
        'downloadUrl': value['downloadUrl'],
        'lineItems': value['lineItems'] == null ? undefined : ((value['lineItems'] as Array<any>).map(InvoiceLineItemToJSON)),
        'createdAt': ((value['createdAt']).toISOString()),
    };
}

