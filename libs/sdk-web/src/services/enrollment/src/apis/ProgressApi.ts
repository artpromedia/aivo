/* tslint:disable */
/* eslint-disable */
/**
 * Enrollment Management API
 * Learner enrollment and course assignment service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@aivo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EnrollmentProgress,
  UpdateProgressRequest,
} from '../models/index';
import {
    EnrollmentProgressFromJSON,
    EnrollmentProgressToJSON,
    UpdateProgressRequestFromJSON,
    UpdateProgressRequestToJSON,
} from '../models/index';

export interface GetEnrollmentProgressRequest {
    enrollmentId: string;
}

export interface UpdateEnrollmentProgressRequest {
    enrollmentId: string;
    updateProgressRequest: UpdateProgressRequest;
}

/**
 * 
 */
export class ProgressApi extends runtime.BaseAPI {

    /**
     * Get enrollment progress
     */
    async getEnrollmentProgressRaw(requestParameters: GetEnrollmentProgressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EnrollmentProgress>> {
        if (requestParameters['enrollmentId'] == null) {
            throw new runtime.RequiredError(
                'enrollmentId',
                'Required parameter "enrollmentId" was null or undefined when calling getEnrollmentProgress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/enrollments/{enrollmentId}/progress`;
        urlPath = urlPath.replace(`{${"enrollmentId"}}`, encodeURIComponent(String(requestParameters['enrollmentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EnrollmentProgressFromJSON(jsonValue));
    }

    /**
     * Get enrollment progress
     */
    async getEnrollmentProgress(requestParameters: GetEnrollmentProgressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EnrollmentProgress> {
        const response = await this.getEnrollmentProgressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update enrollment progress
     */
    async updateEnrollmentProgressRaw(requestParameters: UpdateEnrollmentProgressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EnrollmentProgress>> {
        if (requestParameters['enrollmentId'] == null) {
            throw new runtime.RequiredError(
                'enrollmentId',
                'Required parameter "enrollmentId" was null or undefined when calling updateEnrollmentProgress().'
            );
        }

        if (requestParameters['updateProgressRequest'] == null) {
            throw new runtime.RequiredError(
                'updateProgressRequest',
                'Required parameter "updateProgressRequest" was null or undefined when calling updateEnrollmentProgress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/enrollments/{enrollmentId}/progress`;
        urlPath = urlPath.replace(`{${"enrollmentId"}}`, encodeURIComponent(String(requestParameters['enrollmentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProgressRequestToJSON(requestParameters['updateProgressRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EnrollmentProgressFromJSON(jsonValue));
    }

    /**
     * Update enrollment progress
     */
    async updateEnrollmentProgress(requestParameters: UpdateEnrollmentProgressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EnrollmentProgress> {
        const response = await this.updateEnrollmentProgressRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
