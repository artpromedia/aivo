/* tslint:disable */
/* eslint-disable */
/**
 * Enrollment Management API
 * Learner enrollment and course assignment service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@aivo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateEnrollmentRequest,
  Enrollment,
  ListEnrollments200Response,
  UpdateEnrollmentRequest,
  ValidationError,
} from '../models/index';
import {
    CreateEnrollmentRequestFromJSON,
    CreateEnrollmentRequestToJSON,
    EnrollmentFromJSON,
    EnrollmentToJSON,
    ListEnrollments200ResponseFromJSON,
    ListEnrollments200ResponseToJSON,
    UpdateEnrollmentRequestFromJSON,
    UpdateEnrollmentRequestToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface CreateEnrollmentOperationRequest {
    createEnrollmentRequest: CreateEnrollmentRequest;
}

export interface DeleteEnrollmentRequest {
    enrollmentId: string;
}

export interface GetEnrollmentRequest {
    enrollmentId: string;
}

export interface ListEnrollmentsRequest {
    tenantId: string;
    learnerId?: string;
    courseId?: string;
    status?: ListEnrollmentsStatusEnum;
    limit?: number;
    offset?: number;
}

export interface UpdateEnrollmentOperationRequest {
    enrollmentId: string;
    updateEnrollmentRequest: UpdateEnrollmentRequest;
}

/**
 * 
 */
export class EnrollmentsApi extends runtime.BaseAPI {

    /**
     * Create new enrollment
     */
    async createEnrollmentRaw(requestParameters: CreateEnrollmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Enrollment>> {
        if (requestParameters['createEnrollmentRequest'] == null) {
            throw new runtime.RequiredError(
                'createEnrollmentRequest',
                'Required parameter "createEnrollmentRequest" was null or undefined when calling createEnrollment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/enrollments`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEnrollmentRequestToJSON(requestParameters['createEnrollmentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EnrollmentFromJSON(jsonValue));
    }

    /**
     * Create new enrollment
     */
    async createEnrollment(requestParameters: CreateEnrollmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Enrollment> {
        const response = await this.createEnrollmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete enrollment
     */
    async deleteEnrollmentRaw(requestParameters: DeleteEnrollmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['enrollmentId'] == null) {
            throw new runtime.RequiredError(
                'enrollmentId',
                'Required parameter "enrollmentId" was null or undefined when calling deleteEnrollment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/enrollments/{enrollmentId}`;
        urlPath = urlPath.replace(`{${"enrollmentId"}}`, encodeURIComponent(String(requestParameters['enrollmentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete enrollment
     */
    async deleteEnrollment(requestParameters: DeleteEnrollmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEnrollmentRaw(requestParameters, initOverrides);
    }

    /**
     * Get enrollment by ID
     */
    async getEnrollmentRaw(requestParameters: GetEnrollmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Enrollment>> {
        if (requestParameters['enrollmentId'] == null) {
            throw new runtime.RequiredError(
                'enrollmentId',
                'Required parameter "enrollmentId" was null or undefined when calling getEnrollment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/enrollments/{enrollmentId}`;
        urlPath = urlPath.replace(`{${"enrollmentId"}}`, encodeURIComponent(String(requestParameters['enrollmentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EnrollmentFromJSON(jsonValue));
    }

    /**
     * Get enrollment by ID
     */
    async getEnrollment(requestParameters: GetEnrollmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Enrollment> {
        const response = await this.getEnrollmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List enrollments
     */
    async listEnrollmentsRaw(requestParameters: ListEnrollmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListEnrollments200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling listEnrollments().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['learnerId'] != null) {
            queryParameters['learnerId'] = requestParameters['learnerId'];
        }

        if (requestParameters['courseId'] != null) {
            queryParameters['courseId'] = requestParameters['courseId'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/enrollments`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListEnrollments200ResponseFromJSON(jsonValue));
    }

    /**
     * List enrollments
     */
    async listEnrollments(requestParameters: ListEnrollmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListEnrollments200Response> {
        const response = await this.listEnrollmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update enrollment
     */
    async updateEnrollmentRaw(requestParameters: UpdateEnrollmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Enrollment>> {
        if (requestParameters['enrollmentId'] == null) {
            throw new runtime.RequiredError(
                'enrollmentId',
                'Required parameter "enrollmentId" was null or undefined when calling updateEnrollment().'
            );
        }

        if (requestParameters['updateEnrollmentRequest'] == null) {
            throw new runtime.RequiredError(
                'updateEnrollmentRequest',
                'Required parameter "updateEnrollmentRequest" was null or undefined when calling updateEnrollment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/enrollments/{enrollmentId}`;
        urlPath = urlPath.replace(`{${"enrollmentId"}}`, encodeURIComponent(String(requestParameters['enrollmentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateEnrollmentRequestToJSON(requestParameters['updateEnrollmentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EnrollmentFromJSON(jsonValue));
    }

    /**
     * Update enrollment
     */
    async updateEnrollment(requestParameters: UpdateEnrollmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Enrollment> {
        const response = await this.updateEnrollmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ListEnrollmentsStatusEnum = {
    Enrolled: 'enrolled',
    InProgress: 'in_progress',
    Completed: 'completed',
    Dropped: 'dropped',
    Expired: 'expired'
} as const;
export type ListEnrollmentsStatusEnum = typeof ListEnrollmentsStatusEnum[keyof typeof ListEnrollmentsStatusEnum];
